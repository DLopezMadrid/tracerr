// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#include "scene.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Light_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Obj_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_Pos_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Rectangle_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Sphere_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Triangle_scene_2eproto;
namespace tracerr {
  class Scene_PosDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Pos> _instance;
  } _Scene_Pos_default_instance_;
  class Scene_LightDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Light> _instance;
  } _Scene_Light_default_instance_;
  class Scene_SphereDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Sphere> _instance;
  } _Scene_Sphere_default_instance_;
  class Scene_TriangleDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Triangle> _instance;
  } _Scene_Triangle_default_instance_;
  class Scene_RectangleDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Rectangle> _instance;
  } _Scene_Rectangle_default_instance_;
  class Scene_ObjDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Obj> _instance;
  } _Scene_Obj_default_instance_;
  class SceneDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene> _instance;
  } _Scene_default_instance_;
}// namespace tracerr
static void InitDefaultsscc_info_Scene_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.DefaultConstruct();
  *::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get_mutable() = std::string("RenderTest.png", 14);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
          ::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get_mutable());
  {
    void *ptr = &::tracerr::_Scene_default_instance_;
    new (ptr)::tracerr::Scene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Scene_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Scene_scene_2eproto}, {
                                                                                                                                                    &scc_info_Scene_Light_scene_2eproto.base,
                                                                                                                                                    &scc_info_Scene_Sphere_scene_2eproto.base,
                                                                                                                                                    &scc_info_Scene_Triangle_scene_2eproto.base,
                                                                                                                                                    &scc_info_Scene_Rectangle_scene_2eproto.base,
                                                                                                                                                    &scc_info_Scene_Obj_scene_2eproto.base,
                                                                                                                                            }};

static void InitDefaultsscc_info_Scene_Light_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Light_default_instance_;
    new (ptr)::tracerr::Scene_Light();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Light::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Light_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_Light_scene_2eproto}, {
                                                                                                                                                          &scc_info_Scene_Pos_scene_2eproto.base,
                                                                                                                                                  }};

static void InitDefaultsscc_info_Scene_Obj_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Obj_default_instance_;
    new (ptr)::tracerr::Scene_Obj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Obj::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Obj_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_Obj_scene_2eproto}, {
                                                                                                                                                        &scc_info_Scene_Pos_scene_2eproto.base,
                                                                                                                                                }};

static void InitDefaultsscc_info_Scene_Pos_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Pos_default_instance_;
    new (ptr)::tracerr::Scene_Pos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Pos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_Pos_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scene_Pos_scene_2eproto}, {}};

static void InitDefaultsscc_info_Scene_Rectangle_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Rectangle_default_instance_;
    new (ptr)::tracerr::Scene_Rectangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Rectangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Rectangle_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_Rectangle_scene_2eproto}, {
                                                                                                                                                              &scc_info_Scene_Pos_scene_2eproto.base,
                                                                                                                                                      }};

static void InitDefaultsscc_info_Scene_Sphere_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Sphere_default_instance_;
    new (ptr)::tracerr::Scene_Sphere();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Sphere::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Sphere_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_Sphere_scene_2eproto}, {
                                                                                                                                                           &scc_info_Scene_Pos_scene_2eproto.base,
                                                                                                                                                   }};

static void InitDefaultsscc_info_Scene_Triangle_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Triangle_default_instance_;
    new (ptr)::tracerr::Scene_Triangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Triangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Triangle_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_Triangle_scene_2eproto}, {
                                                                                                                                                             &scc_info_Scene_Pos_scene_2eproto.base,
                                                                                                                                                     }};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scene_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *file_level_enum_descriptors_scene_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_scene_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scene_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Pos, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Pos, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Pos, x_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Pos, y_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Pos, z_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Light, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Light, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Light, p_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Light, intensity_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, p_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, radius_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, material_),
        1,
        2,
        0,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, p0_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, p1_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, p2_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, material_),
        1,
        2,
        3,
        0,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, p0_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, p1_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, p2_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, p3_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, material_),
        1,
        2,
        3,
        4,
        0,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, fname_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, material_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, translation_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, width_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, height_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, savefile_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, fname_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, multithread_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, light_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, sphere_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, triangle_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, rectangle_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, obj_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, show_elapsed_time_),
        1,
        2,
        3,
        0,
        4,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 8, sizeof(::tracerr::Scene_Pos)},
        {11, 18, sizeof(::tracerr::Scene_Light)},
        {20, 28, sizeof(::tracerr::Scene_Sphere)},
        {31, 40, sizeof(::tracerr::Scene_Triangle)},
        {44, 54, sizeof(::tracerr::Scene_Rectangle)},
        {59, 67, sizeof(::tracerr::Scene_Obj)},
        {70, 86, sizeof(::tracerr::Scene)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Pos_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Light_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Sphere_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Triangle_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Rectangle_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Obj_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_default_instance_),
};

const char descriptor_table_protodef_scene_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\013scene.proto\022\007tracerr\"\264\007\n\005Scene\022\r\n\005widt"
        "h\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\026\n\010saveFile\030\003 \002("
        "\010:\004true\022\035\n\005fname\030\004 \001(\t:\016RenderTest.png\022\031"
        "\n\013multiThread\030\005 \001(\010:\004true\022#\n\005light\030\006 \003(\013"
        "2\024.tracerr.Scene.Light\022%\n\006sphere\030\007 \003(\0132\025"
        ".tracerr.Scene.Sphere\022)\n\010triangle\030\010 \003(\0132"
        "\027.tracerr.Scene.Triangle\022+\n\trectangle\030\t "
        "\003(\0132\030.tracerr.Scene.Rectangle\022\037\n\003obj\030\n \003"
        "(\0132\022.tracerr.Scene.Obj\022\037\n\021show_elapsed_t"
        "ime\030\013 \001(\010:\004true\032&\n\003Pos\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002"
        " \002(\002\022\t\n\001z\030\003 \002(\002\0329\n\005Light\022\035\n\001p\030\001 \002(\0132\022.tr"
        "acerr.Scene.Pos\022\021\n\tintensity\030\002 \002(\002\032I\n\006Sp"
        "here\022\035\n\001p\030\001 \002(\0132\022.tracerr.Scene.Pos\022\016\n\006r"
        "adius\030\002 \002(\002\022\020\n\010material\030\003 \002(\t\032|\n\010Triangl"
        "e\022\036\n\002p0\030\001 \002(\0132\022.tracerr.Scene.Pos\022\036\n\002p1\030"
        "\002 \002(\0132\022.tracerr.Scene.Pos\022\036\n\002p2\030\003 \002(\0132\022."
        "tracerr.Scene.Pos\022\020\n\010material\030\004 \002(\t\032\235\001\n\t"
        "Rectangle\022\036\n\002p0\030\001 \002(\0132\022.tracerr.Scene.Po"
        "s\022\036\n\002p1\030\002 \002(\0132\022.tracerr.Scene.Pos\022\036\n\002p2\030"
        "\003 \002(\0132\022.tracerr.Scene.Pos\022\036\n\002p3\030\004 \002(\0132\022."
        "tracerr.Scene.Pos\022\020\n\010material\030\005 \002(\t\032O\n\003O"
        "bj\022\r\n\005fname\030\001 \002(\t\022\020\n\010material\030\002 \002(\t\022\'\n\013t"
        "ranslation\030\003 \001(\0132\022.tracerr.Scene.Pos\"7\n\t"
        "ShapeType\022\013\n\007tSphere\020\000\022\r\n\ttTriangle\020\001\022\016\n"
        "\ntRectangle\020\002";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_scene_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_scene_2eproto_sccs[7] = {
        &scc_info_Scene_scene_2eproto.base,
        &scc_info_Scene_Light_scene_2eproto.base,
        &scc_info_Scene_Obj_scene_2eproto.base,
        &scc_info_Scene_Pos_scene_2eproto.base,
        &scc_info_Scene_Rectangle_scene_2eproto.base,
        &scc_info_Scene_Sphere_scene_2eproto.base,
        &scc_info_Scene_Triangle_scene_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scene_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_2eproto = {
        false,
        false,
        descriptor_table_protodef_scene_2eproto,
        "scene.proto",
        973,
        &descriptor_table_scene_2eproto_once,
        descriptor_table_scene_2eproto_sccs,
        descriptor_table_scene_2eproto_deps,
        7,
        0,
        schemas,
        file_default_instances,
        TableStruct_scene_2eproto::offsets,
        file_level_metadata_scene_2eproto,
        7,
        file_level_enum_descriptors_scene_2eproto,
        file_level_service_descriptors_scene_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scene_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scene_2eproto)), true);
namespace tracerr {
  const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *Scene_ShapeType_descriptor() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
    return file_level_enum_descriptors_scene_2eproto[0];
  }
  bool Scene_ShapeType_IsValid(int value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
      default:
        return false;
    }
  }

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
  constexpr Scene_ShapeType Scene::tSphere;
  constexpr Scene_ShapeType Scene::tTriangle;
  constexpr Scene_ShapeType Scene::tRectangle;
  constexpr Scene_ShapeType Scene::ShapeType_MIN;
  constexpr Scene_ShapeType Scene::ShapeType_MAX;
  constexpr int Scene::ShapeType_ARRAYSIZE;
#endif// (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

  // ===================================================================

  void Scene_Pos::InitAsDefaultInstance() {
  }
  class Scene_Pos::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Pos>()._has_bits_);
    static void set_has_x(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_y(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static void set_has_z(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
    }
  };

  Scene_Pos::Scene_Pos(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Pos)
  }
  Scene_Pos::Scene_Pos(const Scene_Pos &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&x_, &from.x_,
             static_cast<size_t>(reinterpret_cast<char *>(&z_) -
                                 reinterpret_cast<char *>(&x_)) +
                     sizeof(z_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Pos)
  }

  void Scene_Pos::SharedCtor() {
    ::memset(&x_, 0, static_cast<size_t>(reinterpret_cast<char *>(&z_) - reinterpret_cast<char *>(&x_)) + sizeof(z_));
  }

  Scene_Pos::~Scene_Pos() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Pos)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Pos::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void Scene_Pos::ArenaDtor(void *object) {
    Scene_Pos *_this = reinterpret_cast<Scene_Pos *>(object);
    (void) _this;
  }
  void Scene_Pos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Pos::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Pos &Scene_Pos::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Pos_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Pos::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Pos)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      ::memset(&x_, 0, static_cast<size_t>(reinterpret_cast<char *>(&z_) - reinterpret_cast<char *>(&x_)) + sizeof(z_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Pos::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required float x = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
            _Internal::set_has_x(&has_bits);
            x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        // required float y = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
            _Internal::set_has_y(&has_bits);
            y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        // required float z = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
            _Internal::set_has_z(&has_bits);
            z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Pos::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Pos)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required float x = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
    }

    // required float y = 2;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
    }

    // required float z = 3;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Pos)
    return target;
  }

  size_t Scene_Pos::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Pos)
    size_t total_size = 0;

    if (_internal_has_x()) {
      // required float x = 1;
      total_size += 1 + 4;
    }

    if (_internal_has_y()) {
      // required float y = 2;
      total_size += 1 + 4;
    }

    if (_internal_has_z()) {
      // required float z = 3;
      total_size += 1 + 4;
    }

    return total_size;
  }
  size_t Scene_Pos::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Pos)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {// All required fields are present.
      // required float x = 1;
      total_size += 1 + 4;

      // required float y = 2;
      total_size += 1 + 4;

      // required float z = 3;
      total_size += 1 + 4;

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Pos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Pos)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Pos *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Pos>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Pos)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Pos)
      MergeFrom(*source);
    }
  }

  void Scene_Pos::MergeFrom(const Scene_Pos &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Pos)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      if (cached_has_bits & 0x00000001u) {
        x_ = from.x_;
      }
      if (cached_has_bits & 0x00000002u) {
        y_ = from.y_;
      }
      if (cached_has_bits & 0x00000004u) {
        z_ = from.z_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Pos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Pos)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Pos::CopyFrom(const Scene_Pos &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Pos)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Pos::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    return true;
  }

  void Scene_Pos::InternalSwap(Scene_Pos *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Pos, z_) + sizeof(Scene_Pos::z_) - PROTOBUF_FIELD_OFFSET(Scene_Pos, x_)>(
            reinterpret_cast<char *>(&x_),
            reinterpret_cast<char *>(&other->x_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Pos::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Light::InitAsDefaultInstance() {
    ::tracerr::_Scene_Light_default_instance_._instance.get_mutable()->p_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
  }
  class Scene_Light::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Light>()._has_bits_);
    static const ::tracerr::Scene_Pos &p(const Scene_Light *msg);
    static void set_has_p(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_intensity(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
    }
  };

  const ::tracerr::Scene_Pos &
  Scene_Light::_Internal::p(const Scene_Light *msg) {
    return *msg->p_;
  }
  Scene_Light::Scene_Light(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Light)
  }
  Scene_Light::Scene_Light(const Scene_Light &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_p()) {
      p_ = new ::tracerr::Scene_Pos(*from.p_);
    } else {
      p_ = nullptr;
    }
    intensity_ = from.intensity_;
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Light)
  }

  void Scene_Light::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Light_scene_2eproto.base);
    ::memset(&p_, 0, static_cast<size_t>(reinterpret_cast<char *>(&intensity_) - reinterpret_cast<char *>(&p_)) + sizeof(intensity_));
  }

  Scene_Light::~Scene_Light() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Light)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Light::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    if (this != internal_default_instance()) delete p_;
  }

  void Scene_Light::ArenaDtor(void *object) {
    Scene_Light *_this = reinterpret_cast<Scene_Light *>(object);
    (void) _this;
  }
  void Scene_Light::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Light::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Light &Scene_Light::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Light_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Light::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Light)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(p_ != nullptr);
      p_->Clear();
    }
    intensity_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Light::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required .tracerr.Scene.Pos p = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required float intensity = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
            _Internal::set_has_intensity(&has_bits);
            intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Light::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Light)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required .tracerr.Scene.Pos p = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      1, _Internal::p(this), target, stream);
    }

    // required float intensity = 2;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_intensity(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Light)
    return target;
  }

  size_t Scene_Light::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Light)
    size_t total_size = 0;

    if (_internal_has_p()) {
      // required .tracerr.Scene.Pos p = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p_);
    }

    if (_internal_has_intensity()) {
      // required float intensity = 2;
      total_size += 1 + 4;
    }

    return total_size;
  }
  size_t Scene_Light::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Light)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {// All required fields are present.
      // required .tracerr.Scene.Pos p = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p_);

      // required float intensity = 2;
      total_size += 1 + 4;

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Light::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Light)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Light *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Light>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Light)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Light)
      MergeFrom(*source);
    }
  }

  void Scene_Light::MergeFrom(const Scene_Light &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Light)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
      if (cached_has_bits & 0x00000001u) {
        _internal_mutable_p()->::tracerr::Scene_Pos::MergeFrom(from._internal_p());
      }
      if (cached_has_bits & 0x00000002u) {
        intensity_ = from.intensity_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Light::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Light)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Light::CopyFrom(const Scene_Light &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Light)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Light::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_p()) {
      if (!p_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Light::InternalSwap(Scene_Light *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Light, intensity_) + sizeof(Scene_Light::intensity_) - PROTOBUF_FIELD_OFFSET(Scene_Light, p_)>(
            reinterpret_cast<char *>(&p_),
            reinterpret_cast<char *>(&other->p_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Light::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Sphere::InitAsDefaultInstance() {
    ::tracerr::_Scene_Sphere_default_instance_._instance.get_mutable()->p_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
  }
  class Scene_Sphere::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Sphere>()._has_bits_);
    static const ::tracerr::Scene_Pos &p(const Scene_Sphere *msg);
    static void set_has_p(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static void set_has_radius(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static void set_has_material(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
    }
  };

  const ::tracerr::Scene_Pos &
  Scene_Sphere::_Internal::p(const Scene_Sphere *msg) {
    return *msg->p_;
  }
  Scene_Sphere::Scene_Sphere(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Sphere)
  }
  Scene_Sphere::Scene_Sphere(const Scene_Sphere &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (from._internal_has_material()) {
      material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_material(),
                    GetArena());
    }
    if (from._internal_has_p()) {
      p_ = new ::tracerr::Scene_Pos(*from.p_);
    } else {
      p_ = nullptr;
    }
    radius_ = from.radius_;
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Sphere)
  }

  void Scene_Sphere::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Sphere_scene_2eproto.base);
    material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&p_, 0, static_cast<size_t>(reinterpret_cast<char *>(&radius_) - reinterpret_cast<char *>(&p_)) + sizeof(radius_));
  }

  Scene_Sphere::~Scene_Sphere() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Sphere)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Sphere::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    material_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (this != internal_default_instance()) delete p_;
  }

  void Scene_Sphere::ArenaDtor(void *object) {
    Scene_Sphere *_this = reinterpret_cast<Scene_Sphere *>(object);
    (void) _this;
  }
  void Scene_Sphere::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Sphere::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Sphere &Scene_Sphere::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Sphere_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Sphere::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Sphere)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
      if (cached_has_bits & 0x00000001u) {
        material_.ClearNonDefaultToEmpty();
      }
      if (cached_has_bits & 0x00000002u) {
        GOOGLE_DCHECK(p_ != nullptr);
        p_->Clear();
      }
    }
    radius_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Sphere::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required .tracerr.Scene.Pos p = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required float radius = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
            _Internal::set_has_radius(&has_bits);
            radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        // required string material = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
            auto str = _internal_mutable_material();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tracerr.Scene.Sphere.material");
#endif// !NDEBUG
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Sphere::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Sphere)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required .tracerr.Scene.Pos p = 1;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      1, _Internal::p(this), target, stream);
    }

    // required float radius = 2;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_radius(), target);
    }

    // required string material = 3;
    if (cached_has_bits & 0x00000001u) {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
              this->_internal_material().data(), static_cast<int>(this->_internal_material().length()),
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
              "tracerr.Scene.Sphere.material");
      target = stream->WriteStringMaybeAliased(
              3, this->_internal_material(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Sphere)
    return target;
  }

  size_t Scene_Sphere::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Sphere)
    size_t total_size = 0;

    if (_internal_has_material()) {
      // required string material = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_material());
    }

    if (_internal_has_p()) {
      // required .tracerr.Scene.Pos p = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p_);
    }

    if (_internal_has_radius()) {
      // required float radius = 2;
      total_size += 1 + 4;
    }

    return total_size;
  }
  size_t Scene_Sphere::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Sphere)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {// All required fields are present.
      // required string material = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_material());

      // required .tracerr.Scene.Pos p = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p_);

      // required float radius = 2;
      total_size += 1 + 4;

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Sphere::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Sphere)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Sphere *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Sphere>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Sphere)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Sphere)
      MergeFrom(*source);
    }
  }

  void Scene_Sphere::MergeFrom(const Scene_Sphere &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Sphere)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      if (cached_has_bits & 0x00000001u) {
        _internal_set_material(from._internal_material());
      }
      if (cached_has_bits & 0x00000002u) {
        _internal_mutable_p()->::tracerr::Scene_Pos::MergeFrom(from._internal_p());
      }
      if (cached_has_bits & 0x00000004u) {
        radius_ = from.radius_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Sphere::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Sphere)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Sphere::CopyFrom(const Scene_Sphere &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Sphere)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Sphere::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_p()) {
      if (!p_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Sphere::InternalSwap(Scene_Sphere *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    material_.Swap(&other->material_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Sphere, radius_) + sizeof(Scene_Sphere::radius_) - PROTOBUF_FIELD_OFFSET(Scene_Sphere, p_)>(
            reinterpret_cast<char *>(&p_),
            reinterpret_cast<char *>(&other->p_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Sphere::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Triangle::InitAsDefaultInstance() {
    ::tracerr::_Scene_Triangle_default_instance_._instance.get_mutable()->p0_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Triangle_default_instance_._instance.get_mutable()->p1_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Triangle_default_instance_._instance.get_mutable()->p2_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
  }
  class Scene_Triangle::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Triangle>()._has_bits_);
    static const ::tracerr::Scene_Pos &p0(const Scene_Triangle *msg);
    static void set_has_p0(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static const ::tracerr::Scene_Pos &p1(const Scene_Triangle *msg);
    static void set_has_p1(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static const ::tracerr::Scene_Pos &p2(const Scene_Triangle *msg);
    static void set_has_p2(HasBits *has_bits) {
      (*has_bits)[0] |= 8u;
    }
    static void set_has_material(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
    }
  };

  const ::tracerr::Scene_Pos &
  Scene_Triangle::_Internal::p0(const Scene_Triangle *msg) {
    return *msg->p0_;
  }
  const ::tracerr::Scene_Pos &
  Scene_Triangle::_Internal::p1(const Scene_Triangle *msg) {
    return *msg->p1_;
  }
  const ::tracerr::Scene_Pos &
  Scene_Triangle::_Internal::p2(const Scene_Triangle *msg) {
    return *msg->p2_;
  }
  Scene_Triangle::Scene_Triangle(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Triangle)
  }
  Scene_Triangle::Scene_Triangle(const Scene_Triangle &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (from._internal_has_material()) {
      material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_material(),
                    GetArena());
    }
    if (from._internal_has_p0()) {
      p0_ = new ::tracerr::Scene_Pos(*from.p0_);
    } else {
      p0_ = nullptr;
    }
    if (from._internal_has_p1()) {
      p1_ = new ::tracerr::Scene_Pos(*from.p1_);
    } else {
      p1_ = nullptr;
    }
    if (from._internal_has_p2()) {
      p2_ = new ::tracerr::Scene_Pos(*from.p2_);
    } else {
      p2_ = nullptr;
    }
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Triangle)
  }

  void Scene_Triangle::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Triangle_scene_2eproto.base);
    material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&p0_, 0, static_cast<size_t>(reinterpret_cast<char *>(&p2_) - reinterpret_cast<char *>(&p0_)) + sizeof(p2_));
  }

  Scene_Triangle::~Scene_Triangle() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Triangle)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Triangle::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    material_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (this != internal_default_instance()) delete p0_;
    if (this != internal_default_instance()) delete p1_;
    if (this != internal_default_instance()) delete p2_;
  }

  void Scene_Triangle::ArenaDtor(void *object) {
    Scene_Triangle *_this = reinterpret_cast<Scene_Triangle *>(object);
    (void) _this;
  }
  void Scene_Triangle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Triangle::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Triangle &Scene_Triangle::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Triangle_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Triangle::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Triangle)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
      if (cached_has_bits & 0x00000001u) {
        material_.ClearNonDefaultToEmpty();
      }
      if (cached_has_bits & 0x00000002u) {
        GOOGLE_DCHECK(p0_ != nullptr);
        p0_->Clear();
      }
      if (cached_has_bits & 0x00000004u) {
        GOOGLE_DCHECK(p1_ != nullptr);
        p1_->Clear();
      }
      if (cached_has_bits & 0x00000008u) {
        GOOGLE_DCHECK(p2_ != nullptr);
        p2_->Clear();
      }
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Triangle::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required .tracerr.Scene.Pos p0 = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            ptr = ctx->ParseMessage(_internal_mutable_p0(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Pos p1 = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
            ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Pos p2 = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
            ptr = ctx->ParseMessage(_internal_mutable_p2(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required string material = 4;
        case 4:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
            auto str = _internal_mutable_material();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tracerr.Scene.Triangle.material");
#endif// !NDEBUG
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Triangle::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Triangle)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required .tracerr.Scene.Pos p0 = 1;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      1, _Internal::p0(this), target, stream);
    }

    // required .tracerr.Scene.Pos p1 = 2;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      2, _Internal::p1(this), target, stream);
    }

    // required .tracerr.Scene.Pos p2 = 3;
    if (cached_has_bits & 0x00000008u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      3, _Internal::p2(this), target, stream);
    }

    // required string material = 4;
    if (cached_has_bits & 0x00000001u) {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
              this->_internal_material().data(), static_cast<int>(this->_internal_material().length()),
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
              "tracerr.Scene.Triangle.material");
      target = stream->WriteStringMaybeAliased(
              4, this->_internal_material(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Triangle)
    return target;
  }

  size_t Scene_Triangle::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Triangle)
    size_t total_size = 0;

    if (_internal_has_material()) {
      // required string material = 4;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_material());
    }

    if (_internal_has_p0()) {
      // required .tracerr.Scene.Pos p0 = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p0_);
    }

    if (_internal_has_p1()) {
      // required .tracerr.Scene.Pos p1 = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p1_);
    }

    if (_internal_has_p2()) {
      // required .tracerr.Scene.Pos p2 = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p2_);
    }

    return total_size;
  }
  size_t Scene_Triangle::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Triangle)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {// All required fields are present.
      // required string material = 4;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_material());

      // required .tracerr.Scene.Pos p0 = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p0_);

      // required .tracerr.Scene.Pos p1 = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p1_);

      // required .tracerr.Scene.Pos p2 = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p2_);

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Triangle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Triangle)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Triangle *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Triangle>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Triangle)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Triangle)
      MergeFrom(*source);
    }
  }

  void Scene_Triangle::MergeFrom(const Scene_Triangle &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Triangle)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
      if (cached_has_bits & 0x00000001u) {
        _internal_set_material(from._internal_material());
      }
      if (cached_has_bits & 0x00000002u) {
        _internal_mutable_p0()->::tracerr::Scene_Pos::MergeFrom(from._internal_p0());
      }
      if (cached_has_bits & 0x00000004u) {
        _internal_mutable_p1()->::tracerr::Scene_Pos::MergeFrom(from._internal_p1());
      }
      if (cached_has_bits & 0x00000008u) {
        _internal_mutable_p2()->::tracerr::Scene_Pos::MergeFrom(from._internal_p2());
      }
    }
  }

  void Scene_Triangle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Triangle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Triangle::CopyFrom(const Scene_Triangle &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Triangle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Triangle::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_p0()) {
      if (!p0_->IsInitialized()) return false;
    }
    if (_internal_has_p1()) {
      if (!p1_->IsInitialized()) return false;
    }
    if (_internal_has_p2()) {
      if (!p2_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Triangle::InternalSwap(Scene_Triangle *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    material_.Swap(&other->material_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Triangle, p2_) + sizeof(Scene_Triangle::p2_) - PROTOBUF_FIELD_OFFSET(Scene_Triangle, p0_)>(
            reinterpret_cast<char *>(&p0_),
            reinterpret_cast<char *>(&other->p0_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Triangle::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Rectangle::InitAsDefaultInstance() {
    ::tracerr::_Scene_Rectangle_default_instance_._instance.get_mutable()->p0_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Rectangle_default_instance_._instance.get_mutable()->p1_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Rectangle_default_instance_._instance.get_mutable()->p2_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Rectangle_default_instance_._instance.get_mutable()->p3_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
  }
  class Scene_Rectangle::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Rectangle>()._has_bits_);
    static const ::tracerr::Scene_Pos &p0(const Scene_Rectangle *msg);
    static void set_has_p0(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static const ::tracerr::Scene_Pos &p1(const Scene_Rectangle *msg);
    static void set_has_p1(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static const ::tracerr::Scene_Pos &p2(const Scene_Rectangle *msg);
    static void set_has_p2(HasBits *has_bits) {
      (*has_bits)[0] |= 8u;
    }
    static const ::tracerr::Scene_Pos &p3(const Scene_Rectangle *msg);
    static void set_has_p3(HasBits *has_bits) {
      (*has_bits)[0] |= 16u;
    }
    static void set_has_material(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
    }
  };

  const ::tracerr::Scene_Pos &
  Scene_Rectangle::_Internal::p0(const Scene_Rectangle *msg) {
    return *msg->p0_;
  }
  const ::tracerr::Scene_Pos &
  Scene_Rectangle::_Internal::p1(const Scene_Rectangle *msg) {
    return *msg->p1_;
  }
  const ::tracerr::Scene_Pos &
  Scene_Rectangle::_Internal::p2(const Scene_Rectangle *msg) {
    return *msg->p2_;
  }
  const ::tracerr::Scene_Pos &
  Scene_Rectangle::_Internal::p3(const Scene_Rectangle *msg) {
    return *msg->p3_;
  }
  Scene_Rectangle::Scene_Rectangle(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Rectangle)
  }
  Scene_Rectangle::Scene_Rectangle(const Scene_Rectangle &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (from._internal_has_material()) {
      material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_material(),
                    GetArena());
    }
    if (from._internal_has_p0()) {
      p0_ = new ::tracerr::Scene_Pos(*from.p0_);
    } else {
      p0_ = nullptr;
    }
    if (from._internal_has_p1()) {
      p1_ = new ::tracerr::Scene_Pos(*from.p1_);
    } else {
      p1_ = nullptr;
    }
    if (from._internal_has_p2()) {
      p2_ = new ::tracerr::Scene_Pos(*from.p2_);
    } else {
      p2_ = nullptr;
    }
    if (from._internal_has_p3()) {
      p3_ = new ::tracerr::Scene_Pos(*from.p3_);
    } else {
      p3_ = nullptr;
    }
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Rectangle)
  }

  void Scene_Rectangle::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Rectangle_scene_2eproto.base);
    material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&p0_, 0, static_cast<size_t>(reinterpret_cast<char *>(&p3_) - reinterpret_cast<char *>(&p0_)) + sizeof(p3_));
  }

  Scene_Rectangle::~Scene_Rectangle() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Rectangle)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Rectangle::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    material_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (this != internal_default_instance()) delete p0_;
    if (this != internal_default_instance()) delete p1_;
    if (this != internal_default_instance()) delete p2_;
    if (this != internal_default_instance()) delete p3_;
  }

  void Scene_Rectangle::ArenaDtor(void *object) {
    Scene_Rectangle *_this = reinterpret_cast<Scene_Rectangle *>(object);
    (void) _this;
  }
  void Scene_Rectangle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Rectangle::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Rectangle &Scene_Rectangle::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Rectangle_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Rectangle::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Rectangle)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x0000001fu) {
      if (cached_has_bits & 0x00000001u) {
        material_.ClearNonDefaultToEmpty();
      }
      if (cached_has_bits & 0x00000002u) {
        GOOGLE_DCHECK(p0_ != nullptr);
        p0_->Clear();
      }
      if (cached_has_bits & 0x00000004u) {
        GOOGLE_DCHECK(p1_ != nullptr);
        p1_->Clear();
      }
      if (cached_has_bits & 0x00000008u) {
        GOOGLE_DCHECK(p2_ != nullptr);
        p2_->Clear();
      }
      if (cached_has_bits & 0x00000010u) {
        GOOGLE_DCHECK(p3_ != nullptr);
        p3_->Clear();
      }
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Rectangle::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required .tracerr.Scene.Pos p0 = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            ptr = ctx->ParseMessage(_internal_mutable_p0(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Pos p1 = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
            ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Pos p2 = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
            ptr = ctx->ParseMessage(_internal_mutable_p2(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Pos p3 = 4;
        case 4:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
            ptr = ctx->ParseMessage(_internal_mutable_p3(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required string material = 5;
        case 5:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
            auto str = _internal_mutable_material();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tracerr.Scene.Rectangle.material");
#endif// !NDEBUG
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Rectangle::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Rectangle)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required .tracerr.Scene.Pos p0 = 1;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      1, _Internal::p0(this), target, stream);
    }

    // required .tracerr.Scene.Pos p1 = 2;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      2, _Internal::p1(this), target, stream);
    }

    // required .tracerr.Scene.Pos p2 = 3;
    if (cached_has_bits & 0x00000008u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      3, _Internal::p2(this), target, stream);
    }

    // required .tracerr.Scene.Pos p3 = 4;
    if (cached_has_bits & 0x00000010u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      4, _Internal::p3(this), target, stream);
    }

    // required string material = 5;
    if (cached_has_bits & 0x00000001u) {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
              this->_internal_material().data(), static_cast<int>(this->_internal_material().length()),
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
              "tracerr.Scene.Rectangle.material");
      target = stream->WriteStringMaybeAliased(
              5, this->_internal_material(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Rectangle)
    return target;
  }

  size_t Scene_Rectangle::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Rectangle)
    size_t total_size = 0;

    if (_internal_has_material()) {
      // required string material = 5;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_material());
    }

    if (_internal_has_p0()) {
      // required .tracerr.Scene.Pos p0 = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p0_);
    }

    if (_internal_has_p1()) {
      // required .tracerr.Scene.Pos p1 = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p1_);
    }

    if (_internal_has_p2()) {
      // required .tracerr.Scene.Pos p2 = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p2_);
    }

    if (_internal_has_p3()) {
      // required .tracerr.Scene.Pos p3 = 4;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p3_);
    }

    return total_size;
  }
  size_t Scene_Rectangle::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Rectangle)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {// All required fields are present.
      // required string material = 5;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_material());

      // required .tracerr.Scene.Pos p0 = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p0_);

      // required .tracerr.Scene.Pos p1 = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p1_);

      // required .tracerr.Scene.Pos p2 = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p2_);

      // required .tracerr.Scene.Pos p3 = 4;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p3_);

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Rectangle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Rectangle)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Rectangle *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Rectangle>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Rectangle)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Rectangle)
      MergeFrom(*source);
    }
  }

  void Scene_Rectangle::MergeFrom(const Scene_Rectangle &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Rectangle)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x0000001fu) {
      if (cached_has_bits & 0x00000001u) {
        _internal_set_material(from._internal_material());
      }
      if (cached_has_bits & 0x00000002u) {
        _internal_mutable_p0()->::tracerr::Scene_Pos::MergeFrom(from._internal_p0());
      }
      if (cached_has_bits & 0x00000004u) {
        _internal_mutable_p1()->::tracerr::Scene_Pos::MergeFrom(from._internal_p1());
      }
      if (cached_has_bits & 0x00000008u) {
        _internal_mutable_p2()->::tracerr::Scene_Pos::MergeFrom(from._internal_p2());
      }
      if (cached_has_bits & 0x00000010u) {
        _internal_mutable_p3()->::tracerr::Scene_Pos::MergeFrom(from._internal_p3());
      }
    }
  }

  void Scene_Rectangle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Rectangle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Rectangle::CopyFrom(const Scene_Rectangle &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Rectangle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Rectangle::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_p0()) {
      if (!p0_->IsInitialized()) return false;
    }
    if (_internal_has_p1()) {
      if (!p1_->IsInitialized()) return false;
    }
    if (_internal_has_p2()) {
      if (!p2_->IsInitialized()) return false;
    }
    if (_internal_has_p3()) {
      if (!p3_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Rectangle::InternalSwap(Scene_Rectangle *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    material_.Swap(&other->material_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Rectangle, p3_) + sizeof(Scene_Rectangle::p3_) - PROTOBUF_FIELD_OFFSET(Scene_Rectangle, p0_)>(
            reinterpret_cast<char *>(&p0_),
            reinterpret_cast<char *>(&other->p0_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Rectangle::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Obj::InitAsDefaultInstance() {
    ::tracerr::_Scene_Obj_default_instance_._instance.get_mutable()->translation_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
  }
  class Scene_Obj::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Obj>()._has_bits_);
    static void set_has_fname(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_material(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static const ::tracerr::Scene_Pos &translation(const Scene_Obj *msg);
    static void set_has_translation(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
    }
  };

  const ::tracerr::Scene_Pos &
  Scene_Obj::_Internal::translation(const Scene_Obj *msg) {
    return *msg->translation_;
  }
  Scene_Obj::Scene_Obj(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Obj)
  }
  Scene_Obj::Scene_Obj(const Scene_Obj &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (from._internal_has_fname()) {
      fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fname(),
                 GetArena());
    }
    material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (from._internal_has_material()) {
      material_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_material(),
                    GetArena());
    }
    if (from._internal_has_translation()) {
      translation_ = new ::tracerr::Scene_Pos(*from.translation_);
    } else {
      translation_ = nullptr;
    }
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Obj)
  }

  void Scene_Obj::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Obj_scene_2eproto.base);
    fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    translation_ = nullptr;
  }

  Scene_Obj::~Scene_Obj() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Obj)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Obj::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    material_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (this != internal_default_instance()) delete translation_;
  }

  void Scene_Obj::ArenaDtor(void *object) {
    Scene_Obj *_this = reinterpret_cast<Scene_Obj *>(object);
    (void) _this;
  }
  void Scene_Obj::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Obj::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Obj &Scene_Obj::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Obj_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Obj::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Obj)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      if (cached_has_bits & 0x00000001u) {
        fname_.ClearNonDefaultToEmpty();
      }
      if (cached_has_bits & 0x00000002u) {
        material_.ClearNonDefaultToEmpty();
      }
      if (cached_has_bits & 0x00000004u) {
        GOOGLE_DCHECK(translation_ != nullptr);
        translation_->Clear();
      }
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Obj::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required string fname = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            auto str = _internal_mutable_fname();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tracerr.Scene.Obj.fname");
#endif// !NDEBUG
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required string material = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
            auto str = _internal_mutable_material();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tracerr.Scene.Obj.material");
#endif// !NDEBUG
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.Pos translation = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
            ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Obj::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Obj)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required string fname = 1;
    if (cached_has_bits & 0x00000001u) {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
              this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
              "tracerr.Scene.Obj.fname");
      target = stream->WriteStringMaybeAliased(
              1, this->_internal_fname(), target);
    }

    // required string material = 2;
    if (cached_has_bits & 0x00000002u) {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
              this->_internal_material().data(), static_cast<int>(this->_internal_material().length()),
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
              "tracerr.Scene.Obj.material");
      target = stream->WriteStringMaybeAliased(
              2, this->_internal_material(), target);
    }

    // optional .tracerr.Scene.Pos translation = 3;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      3, _Internal::translation(this), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Obj)
    return target;
  }

  size_t Scene_Obj::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Obj)
    size_t total_size = 0;

    if (_internal_has_fname()) {
      // required string fname = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_fname());
    }

    if (_internal_has_material()) {
      // required string material = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_material());
    }

    return total_size;
  }
  size_t Scene_Obj::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Obj)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {// All required fields are present.
      // required string fname = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_fname());

      // required string material = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_material());

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // optional .tracerr.Scene.Pos translation = 3;
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *translation_);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Obj::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Obj)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Obj *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Obj>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Obj)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Obj)
      MergeFrom(*source);
    }
  }

  void Scene_Obj::MergeFrom(const Scene_Obj &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Obj)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      if (cached_has_bits & 0x00000001u) {
        _internal_set_fname(from._internal_fname());
      }
      if (cached_has_bits & 0x00000002u) {
        _internal_set_material(from._internal_material());
      }
      if (cached_has_bits & 0x00000004u) {
        _internal_mutable_translation()->::tracerr::Scene_Pos::MergeFrom(from._internal_translation());
      }
    }
  }

  void Scene_Obj::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Obj)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Obj::CopyFrom(const Scene_Obj &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Obj)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Obj::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_translation()) {
      if (!translation_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Obj::InternalSwap(Scene_Obj *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    material_.Swap(&other->material_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    swap(translation_, other->translation_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Obj::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene::InitAsDefaultInstance() {
  }
  class Scene::_Internal {
public:
    using HasBits = decltype(std::declval<Scene>()._has_bits_);
    static void set_has_width(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static void set_has_height(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static void set_has_savefile(HasBits *has_bits) {
      (*has_bits)[0] |= 8u;
    }
    static void set_has_fname(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_multithread(HasBits *has_bits) {
      (*has_bits)[0] |= 16u;
    }
    static void set_has_show_elapsed_time(HasBits *has_bits) {
      (*has_bits)[0] |= 32u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
    }
  };

  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Scene::_i_give_permission_to_break_this_code_default_fname_;
  Scene::Scene(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena),
        light_(arena),
        sphere_(arena),
        triangle_(arena),
        rectangle_(arena),
        obj_(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene)
  }
  Scene::Scene(const Scene &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_),
        light_(from.light_),
        sphere_(from.sphere_),
        triangle_(from.triangle_),
        rectangle_(from.rectangle_),
        obj_(from.obj_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    fname_.UnsafeSetDefault(&::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get());
    if (from._internal_has_fname()) {
      fname_.Set(&::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get(), from._internal_fname(),
                 GetArena());
    }
    ::memcpy(&width_, &from.width_,
             static_cast<size_t>(reinterpret_cast<char *>(&show_elapsed_time_) -
                                 reinterpret_cast<char *>(&width_)) +
                     sizeof(show_elapsed_time_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene)
  }

  void Scene::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_scene_2eproto.base);
    fname_.UnsafeSetDefault(&::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get());
    ::memset(&width_, 0, static_cast<size_t>(reinterpret_cast<char *>(&height_) - reinterpret_cast<char *>(&width_)) + sizeof(height_));
    savefile_ = true;
    multithread_ = true;
    show_elapsed_time_ = true;
  }

  Scene::~Scene() {
    // @@protoc_insertion_point(destructor:tracerr.Scene)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    fname_.DestroyNoArena(&::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get());
  }

  void Scene::ArenaDtor(void *object) {
    Scene *_this = reinterpret_cast<Scene *>(object);
    (void) _this;
  }
  void Scene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene &Scene::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    light_.Clear();
    sphere_.Clear();
    triangle_.Clear();
    rectangle_.Clear();
    obj_.Clear();
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
      fname_.ClearToDefault(&::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get(), GetArena());
    }
    if (cached_has_bits & 0x0000003eu) {
      ::memset(&width_, 0, static_cast<size_t>(reinterpret_cast<char *>(&height_) - reinterpret_cast<char *>(&width_)) + sizeof(height_));
      savefile_ = true;
      multithread_ = true;
      show_elapsed_time_ = true;
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required int32 width = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
            _Internal::set_has_width(&has_bits);
            width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required int32 height = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
            _Internal::set_has_height(&has_bits);
            height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required bool saveFile = 3 [default = true];
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
            _Internal::set_has_savefile(&has_bits);
            savefile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional string fname = 4 [default = "RenderTest.png"];
        case 4:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
            auto str = _internal_mutable_fname();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tracerr.Scene.fname");
#endif// !NDEBUG
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional bool multiThread = 5 [default = true];
        case 5:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
            _Internal::set_has_multithread(&has_bits);
            multithread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // repeated .tracerr.Scene.Light light = 6;
        case 6:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
            ptr -= 1;
            do {
              ptr += 1;
              ptr = ctx->ParseMessage(_internal_add_light(), ptr);
              CHK_(ptr);
              if (!ctx->DataAvailable(ptr)) break;
            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
          } else
            goto handle_unusual;
          continue;
        // repeated .tracerr.Scene.Sphere sphere = 7;
        case 7:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
            ptr -= 1;
            do {
              ptr += 1;
              ptr = ctx->ParseMessage(_internal_add_sphere(), ptr);
              CHK_(ptr);
              if (!ctx->DataAvailable(ptr)) break;
            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
          } else
            goto handle_unusual;
          continue;
        // repeated .tracerr.Scene.Triangle triangle = 8;
        case 8:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
            ptr -= 1;
            do {
              ptr += 1;
              ptr = ctx->ParseMessage(_internal_add_triangle(), ptr);
              CHK_(ptr);
              if (!ctx->DataAvailable(ptr)) break;
            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
          } else
            goto handle_unusual;
          continue;
        // repeated .tracerr.Scene.Rectangle rectangle = 9;
        case 9:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
            ptr -= 1;
            do {
              ptr += 1;
              ptr = ctx->ParseMessage(_internal_add_rectangle(), ptr);
              CHK_(ptr);
              if (!ctx->DataAvailable(ptr)) break;
            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
          } else
            goto handle_unusual;
          continue;
        // repeated .tracerr.Scene.Obj obj = 10;
        case 10:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
            ptr -= 1;
            do {
              ptr += 1;
              ptr = ctx->ParseMessage(_internal_add_obj(), ptr);
              CHK_(ptr);
              if (!ctx->DataAvailable(ptr)) break;
            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
          } else
            goto handle_unusual;
          continue;
        // optional bool show_elapsed_time = 11 [default = true];
        case 11:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
            _Internal::set_has_show_elapsed_time(&has_bits);
            show_elapsed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required int32 width = 1;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
    }

    // required int32 height = 2;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
    }

    // required bool saveFile = 3 [default = true];
    if (cached_has_bits & 0x00000008u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_savefile(), target);
    }

    // optional string fname = 4 [default = "RenderTest.png"];
    if (cached_has_bits & 0x00000001u) {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
              this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
              "tracerr.Scene.fname");
      target = stream->WriteStringMaybeAliased(
              4, this->_internal_fname(), target);
    }

    // optional bool multiThread = 5 [default = true];
    if (cached_has_bits & 0x00000010u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_multithread(), target);
    }

    // repeated .tracerr.Scene.Light light = 6;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_light_size());
         i < n; i++) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(6, this->_internal_light(i), target, stream);
    }

    // repeated .tracerr.Scene.Sphere sphere = 7;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_sphere_size());
         i < n; i++) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(7, this->_internal_sphere(i), target, stream);
    }

    // repeated .tracerr.Scene.Triangle triangle = 8;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_triangle_size());
         i < n; i++) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(8, this->_internal_triangle(i), target, stream);
    }

    // repeated .tracerr.Scene.Rectangle rectangle = 9;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_rectangle_size());
         i < n; i++) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(9, this->_internal_rectangle(i), target, stream);
    }

    // repeated .tracerr.Scene.Obj obj = 10;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_obj_size());
         i < n; i++) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(10, this->_internal_obj(i), target, stream);
    }

    // optional bool show_elapsed_time = 11 [default = true];
    if (cached_has_bits & 0x00000020u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_show_elapsed_time(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene)
    return target;
  }

  size_t Scene::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene)
    size_t total_size = 0;

    if (_internal_has_width()) {
      // required int32 width = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_width());
    }

    if (_internal_has_height()) {
      // required int32 height = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_height());
    }

    if (_internal_has_savefile()) {
      // required bool saveFile = 3 [default = true];
      total_size += 1 + 1;
    }

    return total_size;
  }
  size_t Scene::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {// All required fields are present.
      // required int32 width = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_width());

      // required int32 height = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_height());

      // required bool saveFile = 3 [default = true];
      total_size += 1 + 1;

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // repeated .tracerr.Scene.Light light = 6;
    total_size += 1UL * this->_internal_light_size();
    for (const auto &msg : this->light_) {
      total_size +=
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .tracerr.Scene.Sphere sphere = 7;
    total_size += 1UL * this->_internal_sphere_size();
    for (const auto &msg : this->sphere_) {
      total_size +=
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .tracerr.Scene.Triangle triangle = 8;
    total_size += 1UL * this->_internal_triangle_size();
    for (const auto &msg : this->triangle_) {
      total_size +=
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .tracerr.Scene.Rectangle rectangle = 9;
    total_size += 1UL * this->_internal_rectangle_size();
    for (const auto &msg : this->rectangle_) {
      total_size +=
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .tracerr.Scene.Obj obj = 10;
    total_size += 1UL * this->_internal_obj_size();
    for (const auto &msg : this->obj_) {
      total_size +=
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // optional string fname = 4 [default = "RenderTest.png"];
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_fname());
    }

    if (cached_has_bits & 0x00000030u) {
      // optional bool multiThread = 5 [default = true];
      if (cached_has_bits & 0x00000010u) {
        total_size += 1 + 1;
      }

      // optional bool show_elapsed_time = 11 [default = true];
      if (cached_has_bits & 0x00000020u) {
        total_size += 1 + 1;
      }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene)
      MergeFrom(*source);
    }
  }

  void Scene::MergeFrom(const Scene &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    light_.MergeFrom(from.light_);
    sphere_.MergeFrom(from.sphere_);
    triangle_.MergeFrom(from.triangle_);
    rectangle_.MergeFrom(from.rectangle_);
    obj_.MergeFrom(from.obj_);
    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x0000003fu) {
      if (cached_has_bits & 0x00000001u) {
        _internal_set_fname(from._internal_fname());
      }
      if (cached_has_bits & 0x00000002u) {
        width_ = from.width_;
      }
      if (cached_has_bits & 0x00000004u) {
        height_ = from.height_;
      }
      if (cached_has_bits & 0x00000008u) {
        savefile_ = from.savefile_;
      }
      if (cached_has_bits & 0x00000010u) {
        multithread_ = from.multithread_;
      }
      if (cached_has_bits & 0x00000020u) {
        show_elapsed_time_ = from.show_elapsed_time_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene::CopyFrom(const Scene &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(light_)) return false;
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sphere_)) return false;
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(triangle_)) return false;
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rectangle_)) return false;
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(obj_)) return false;
    return true;
  }

  void Scene::InternalSwap(Scene *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    light_.InternalSwap(&other->light_);
    sphere_.InternalSwap(&other->sphere_);
    triangle_.InternalSwap(&other->triangle_);
    rectangle_.InternalSwap(&other->rectangle_);
    obj_.InternalSwap(&other->obj_);
    fname_.Swap(&other->fname_, &::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene, height_) + sizeof(Scene::height_) - PROTOBUF_FIELD_OFFSET(Scene, width_)>(
            reinterpret_cast<char *>(&width_),
            reinterpret_cast<char *>(&other->width_));
    swap(savefile_, other->savefile_);
    swap(multithread_, other->multithread_);
    swap(show_elapsed_time_, other->show_elapsed_time_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene::GetMetadata() const {
    return GetMetadataStatic();
  }


  // @@protoc_insertion_point(namespace_scope)
}// namespace tracerr
PROTOBUF_NAMESPACE_OPEN
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Pos *Arena::CreateMaybeMessage<::tracerr::Scene_Pos>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Pos>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Light *Arena::CreateMaybeMessage<::tracerr::Scene_Light>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Light>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Sphere *Arena::CreateMaybeMessage<::tracerr::Scene_Sphere>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Sphere>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Triangle *Arena::CreateMaybeMessage<::tracerr::Scene_Triangle>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Triangle>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Rectangle *Arena::CreateMaybeMessage<::tracerr::Scene_Rectangle>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Rectangle>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Obj *Arena::CreateMaybeMessage<::tracerr::Scene_Obj>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Obj>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene *Arena::CreateMaybeMessage<::tracerr::Scene>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
