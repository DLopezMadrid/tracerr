// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#include "scene.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_Color_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Light_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Material_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_Material_Albedo_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_Material_Color_diff_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Obj_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_Pos_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Rectangle_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Sphere_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Triangle_scene_2eproto;
namespace tracerr {
  class Scene_PosDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Pos> _instance;
  } _Scene_Pos_default_instance_;
  class Scene_LightDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Light> _instance;
  } _Scene_Light_default_instance_;
  class Scene_SphereDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Sphere> _instance;
  } _Scene_Sphere_default_instance_;
  class Scene_TriangleDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Triangle> _instance;
  } _Scene_Triangle_default_instance_;
  class Scene_RectangleDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Rectangle> _instance;
  } _Scene_Rectangle_default_instance_;
  class Scene_ObjDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Obj> _instance;
  } _Scene_Obj_default_instance_;
  class Scene_ColorDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Color> _instance;
  } _Scene_Color_default_instance_;
  class Scene_Material_Color_diffDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Material_Color_diff> _instance;
  } _Scene_Material_Color_diff_default_instance_;
  class Scene_Material_AlbedoDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Material_Albedo> _instance;
  } _Scene_Material_Albedo_default_instance_;
  class Scene_MaterialDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Material> _instance;
  } _Scene_Material_default_instance_;
  class SceneDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene> _instance;
  } _Scene_default_instance_;
}// namespace tracerr
static void InitDefaultsscc_info_Scene_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.DefaultConstruct();
  *::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get_mutable() = std::string("RenderTest.png", 14);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
          ::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get_mutable());
  {
    void *ptr = &::tracerr::_Scene_default_instance_;
    new (ptr)::tracerr::Scene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Scene_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Scene_scene_2eproto}, {
                                                                                                                                                    &scc_info_Scene_Light_scene_2eproto.base,
                                                                                                                                                    &scc_info_Scene_Sphere_scene_2eproto.base,
                                                                                                                                                    &scc_info_Scene_Triangle_scene_2eproto.base,
                                                                                                                                                    &scc_info_Scene_Rectangle_scene_2eproto.base,
                                                                                                                                                    &scc_info_Scene_Obj_scene_2eproto.base,
                                                                                                                                                    &scc_info_Scene_Color_scene_2eproto.base,
                                                                                                                                            }};

static void InitDefaultsscc_info_Scene_Color_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Color_default_instance_;
    new (ptr)::tracerr::Scene_Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Color::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_Color_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scene_Color_scene_2eproto}, {}};

static void InitDefaultsscc_info_Scene_Light_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Light_default_instance_;
    new (ptr)::tracerr::Scene_Light();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Light::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Light_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_Light_scene_2eproto}, {
                                                                                                                                                          &scc_info_Scene_Pos_scene_2eproto.base,
                                                                                                                                                  }};

static void InitDefaultsscc_info_Scene_Material_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Material_default_instance_;
    new (ptr)::tracerr::Scene_Material();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Material::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Material_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Scene_Material_scene_2eproto}, {
                                                                                                                                                             &scc_info_Scene_Material_Color_diff_scene_2eproto.base,
                                                                                                                                                             &scc_info_Scene_Material_Albedo_scene_2eproto.base,
                                                                                                                                                     }};

static void InitDefaultsscc_info_Scene_Material_Albedo_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Material_Albedo_default_instance_;
    new (ptr)::tracerr::Scene_Material_Albedo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Material_Albedo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_Material_Albedo_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scene_Material_Albedo_scene_2eproto}, {}};

static void InitDefaultsscc_info_Scene_Material_Color_diff_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Material_Color_diff_default_instance_;
    new (ptr)::tracerr::Scene_Material_Color_diff();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Material_Color_diff::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_Material_Color_diff_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scene_Material_Color_diff_scene_2eproto}, {}};

static void InitDefaultsscc_info_Scene_Obj_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Obj_default_instance_;
    new (ptr)::tracerr::Scene_Obj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Obj::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Obj_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Scene_Obj_scene_2eproto}, {
                                                                                                                                                        &scc_info_Scene_Pos_scene_2eproto.base,
                                                                                                                                                        &scc_info_Scene_Material_scene_2eproto.base,
                                                                                                                                                }};

static void InitDefaultsscc_info_Scene_Pos_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Pos_default_instance_;
    new (ptr)::tracerr::Scene_Pos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Pos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_Pos_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scene_Pos_scene_2eproto}, {}};

static void InitDefaultsscc_info_Scene_Rectangle_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Rectangle_default_instance_;
    new (ptr)::tracerr::Scene_Rectangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Rectangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Rectangle_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Scene_Rectangle_scene_2eproto}, {
                                                                                                                                                              &scc_info_Scene_Pos_scene_2eproto.base,
                                                                                                                                                              &scc_info_Scene_Material_scene_2eproto.base,
                                                                                                                                                      }};

static void InitDefaultsscc_info_Scene_Sphere_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Sphere_default_instance_;
    new (ptr)::tracerr::Scene_Sphere();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Sphere::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Sphere_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Scene_Sphere_scene_2eproto}, {
                                                                                                                                                           &scc_info_Scene_Pos_scene_2eproto.base,
                                                                                                                                                           &scc_info_Scene_Material_scene_2eproto.base,
                                                                                                                                                   }};

static void InitDefaultsscc_info_Scene_Triangle_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::tracerr::_Scene_Triangle_default_instance_;
    new (ptr)::tracerr::Scene_Triangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tracerr::Scene_Triangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Triangle_scene_2eproto =
        {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Scene_Triangle_scene_2eproto}, {
                                                                                                                                                             &scc_info_Scene_Pos_scene_2eproto.base,
                                                                                                                                                             &scc_info_Scene_Material_scene_2eproto.base,
                                                                                                                                                     }};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scene_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *file_level_enum_descriptors_scene_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_scene_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scene_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Pos, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Pos, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Pos, x_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Pos, y_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Pos, z_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Light, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Light, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Light, position_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Light, intensity_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, position_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, radius_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, material_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, custom_material_enabled_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Sphere, custom_material_),
        0,
        2,
        3,
        4,
        1,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, p0_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, p1_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, p2_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, material_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, custom_material_enabled_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Triangle, custom_material_),
        0,
        1,
        2,
        4,
        5,
        3,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, p0_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, p1_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, p2_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, p3_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, material_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, custom_material_enabled_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Rectangle, custom_material_),
        0,
        1,
        2,
        3,
        5,
        6,
        4,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, fname_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, material_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, translation_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, custom_material_enabled_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Obj, custom_material_),
        0,
        3,
        1,
        4,
        2,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Color, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Color, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Color, r_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Color, g_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Color, b_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Color_diff, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Color_diff, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Color_diff, r_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Color_diff, g_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Color_diff, b_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Albedo, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Albedo, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Albedo, a0_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Albedo, a1_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Albedo, a2_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material_Albedo, a3_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material, color_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material, albedo_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material, specular_comp_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene_Material, refractive_index_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, _internal_metadata_),
        ~0u,// no _extensions_
        ~0u,// no _oneof_case_
        ~0u,// no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, width_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, height_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, savefile_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, fname_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, multithread_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, light_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, sphere_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, triangle_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, rectangle_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, obj_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, show_elapsed_time_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, show_checkerboard_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, background_color_),
        PROTOBUF_FIELD_OFFSET(::tracerr::Scene, ambient_light_),
        2,
        3,
        6,
        0,
        7,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        8,
        4,
        1,
        5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 8, sizeof(::tracerr::Scene_Pos)},
        {11, 18, sizeof(::tracerr::Scene_Light)},
        {20, 30, sizeof(::tracerr::Scene_Sphere)},
        {35, 46, sizeof(::tracerr::Scene_Triangle)},
        {52, 64, sizeof(::tracerr::Scene_Rectangle)},
        {71, 81, sizeof(::tracerr::Scene_Obj)},
        {86, 94, sizeof(::tracerr::Scene_Color)},
        {97, 105, sizeof(::tracerr::Scene_Material_Color_diff)},
        {108, 117, sizeof(::tracerr::Scene_Material_Albedo)},
        {121, 130, sizeof(::tracerr::Scene_Material)},
        {134, 153, sizeof(::tracerr::Scene)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Pos_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Light_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Sphere_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Triangle_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Rectangle_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Obj_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Color_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Material_Color_diff_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Material_Albedo_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_Material_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::tracerr::_Scene_default_instance_),
};

const char descriptor_table_protodef_scene_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\013scene.proto\022\007tracerr\"\303\017\n\005Scene\022\r\n\005widt"
        "h\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\026\n\010saveFile\030\003 \002("
        "\010:\004true\022\035\n\005fname\030\004 \001(\t:\016RenderTest.png\022\031"
        "\n\013multiThread\030\005 \001(\010:\004true\022#\n\005light\030\006 \003(\013"
        "2\024.tracerr.Scene.Light\022%\n\006sphere\030\007 \003(\0132\025"
        ".tracerr.Scene.Sphere\022)\n\010triangle\030\010 \003(\0132"
        "\027.tracerr.Scene.Triangle\022+\n\trectangle\030\t "
        "\003(\0132\030.tracerr.Scene.Rectangle\022\037\n\003obj\030\n \003"
        "(\0132\022.tracerr.Scene.Obj\022\037\n\021show_elapsed_t"
        "ime\030\013 \001(\010:\004true\022 \n\021show_checkerboard\030\014 \001"
        "(\010:\005false\022.\n\020background_color\030\r \001(\0132\024.tr"
        "acerr.Scene.Color\022\025\n\rambient_light\030\016 \001(\002"
        "\032&\n\003Pos\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002"
        "\032@\n\005Light\022$\n\010position\030\001 \002(\0132\022.tracerr.Sc"
        "ene.Pos\022\021\n\tintensity\030\002 \002(\002\032\307\001\n\006Sphere\022$\n"
        "\010position\030\001 \002(\0132\022.tracerr.Scene.Pos\022\016\n\006r"
        "adius\030\002 \002(\002\022-\n\010material\030\003 \001(\0162\033.tracerr."
        "Scene.MaterialType\022&\n\027custom_material_en"
        "abled\030\004 \001(\010:\005false\0220\n\017custom_material\030\005 "
        "\001(\0132\027.tracerr.Scene.Material\032\363\001\n\010Triangl"
        "e\022\036\n\002p0\030\001 \002(\0132\022.tracerr.Scene.Pos\022\036\n\002p1\030"
        "\002 \002(\0132\022.tracerr.Scene.Pos\022\036\n\002p2\030\003 \002(\0132\022."
        "tracerr.Scene.Pos\022-\n\010material\030\004 \001(\0162\033.tr"
        "acerr.Scene.MaterialType\022&\n\027custom_mater"
        "ial_enabled\030\005 \001(\010:\005false\0220\n\017custom_mater"
        "ial\030\006 \001(\0132\027.tracerr.Scene.Material\032\224\002\n\tR"
        "ectangle\022\036\n\002p0\030\001 \002(\0132\022.tracerr.Scene.Pos"
        "\022\036\n\002p1\030\002 \002(\0132\022.tracerr.Scene.Pos\022\036\n\002p2\030\003"
        " \002(\0132\022.tracerr.Scene.Pos\022\036\n\002p3\030\004 \002(\0132\022.t"
        "racerr.Scene.Pos\022-\n\010material\030\005 \001(\0162\033.tra"
        "cerr.Scene.MaterialType\022&\n\027custom_materi"
        "al_enabled\030\006 \001(\010:\005false\0220\n\017custom_materi"
        "al\030\007 \001(\0132\027.tracerr.Scene.Material\032\306\001\n\003Ob"
        "j\022\r\n\005fname\030\001 \002(\t\022-\n\010material\030\002 \001(\0162\033.tra"
        "cerr.Scene.MaterialType\022\'\n\013translation\030\003"
        " \001(\0132\022.tracerr.Scene.Pos\022&\n\027custom_mater"
        "ial_enabled\030\004 \001(\010:\005false\0220\n\017custom_mater"
        "ial\030\005 \001(\0132\027.tracerr.Scene.Material\032(\n\005Co"
        "lor\022\t\n\001r\030\001 \002(\005\022\t\n\001g\030\002 \002(\005\022\t\n\001b\030\003 \002(\005\032\207\002\n"
        "\010Material\0221\n\005color\030\001 \002(\0132\".tracerr.Scene"
        ".Material.Color_diff\022.\n\006albedo\030\002 \002(\0132\036.t"
        "racerr.Scene.Material.Albedo\022\025\n\rspecular"
        "_comp\030\003 \002(\002\022\030\n\020refractive_index\030\004 \002(\002\032-\n"
        "\nColor_diff\022\t\n\001r\030\001 \002(\005\022\t\n\001g\030\002 \002(\005\022\t\n\001b\030\003"
        " \002(\005\0328\n\006Albedo\022\n\n\002a0\030\001 \002(\002\022\n\n\002a1\030\002 \002(\002\022\n"
        "\n\002a2\030\003 \002(\002\022\n\n\002a3\030\004 \002(\002\"\273\001\n\014MaterialType\022"
        "\t\n\005ivory\020\000\022\016\n\nred_rubber\020\001\022\020\n\014green_rubb"
        "er\020\002\022\017\n\013blue_rubber\020\003\022\021\n\rorange_rubber\020\004"
        "\022\017\n\013pink_rubber\020\005\022\017\n\013red_plastic\020\006\022\021\n\rbl"
        "ack_plastic\020\007\022\n\n\006mirror\020\010\022\t\n\005glass\020\t\022\016\n\n"
        "chessboard\020\n";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_scene_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_scene_2eproto_sccs[11] = {
        &scc_info_Scene_scene_2eproto.base,
        &scc_info_Scene_Color_scene_2eproto.base,
        &scc_info_Scene_Light_scene_2eproto.base,
        &scc_info_Scene_Material_scene_2eproto.base,
        &scc_info_Scene_Material_Albedo_scene_2eproto.base,
        &scc_info_Scene_Material_Color_diff_scene_2eproto.base,
        &scc_info_Scene_Obj_scene_2eproto.base,
        &scc_info_Scene_Pos_scene_2eproto.base,
        &scc_info_Scene_Rectangle_scene_2eproto.base,
        &scc_info_Scene_Sphere_scene_2eproto.base,
        &scc_info_Scene_Triangle_scene_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scene_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_2eproto = {
        false,
        false,
        descriptor_table_protodef_scene_2eproto,
        "scene.proto",
        2012,
        &descriptor_table_scene_2eproto_once,
        descriptor_table_scene_2eproto_sccs,
        descriptor_table_scene_2eproto_deps,
        11,
        0,
        schemas,
        file_default_instances,
        TableStruct_scene_2eproto::offsets,
        file_level_metadata_scene_2eproto,
        11,
        file_level_enum_descriptors_scene_2eproto,
        file_level_service_descriptors_scene_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scene_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scene_2eproto)), true);
namespace tracerr {
  const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *Scene_MaterialType_descriptor() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
    return file_level_enum_descriptors_scene_2eproto[0];
  }
  bool Scene_MaterialType_IsValid(int value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        return true;
      default:
        return false;
    }
  }

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
  constexpr Scene_MaterialType Scene::ivory;
  constexpr Scene_MaterialType Scene::red_rubber;
  constexpr Scene_MaterialType Scene::green_rubber;
  constexpr Scene_MaterialType Scene::blue_rubber;
  constexpr Scene_MaterialType Scene::orange_rubber;
  constexpr Scene_MaterialType Scene::pink_rubber;
  constexpr Scene_MaterialType Scene::red_plastic;
  constexpr Scene_MaterialType Scene::black_plastic;
  constexpr Scene_MaterialType Scene::mirror;
  constexpr Scene_MaterialType Scene::glass;
  constexpr Scene_MaterialType Scene::chessboard;
  constexpr Scene_MaterialType Scene::MaterialType_MIN;
  constexpr Scene_MaterialType Scene::MaterialType_MAX;
  constexpr int Scene::MaterialType_ARRAYSIZE;
#endif// (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

  // ===================================================================

  void Scene_Pos::InitAsDefaultInstance() {
  }
  class Scene_Pos::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Pos>()._has_bits_);
    static void set_has_x(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_y(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static void set_has_z(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
    }
  };

  Scene_Pos::Scene_Pos(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Pos)
  }
  Scene_Pos::Scene_Pos(const Scene_Pos &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&x_, &from.x_,
             static_cast<size_t>(reinterpret_cast<char *>(&z_) -
                                 reinterpret_cast<char *>(&x_)) +
                     sizeof(z_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Pos)
  }

  void Scene_Pos::SharedCtor() {
    ::memset(&x_, 0, static_cast<size_t>(reinterpret_cast<char *>(&z_) - reinterpret_cast<char *>(&x_)) + sizeof(z_));
  }

  Scene_Pos::~Scene_Pos() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Pos)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Pos::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void Scene_Pos::ArenaDtor(void *object) {
    Scene_Pos *_this = reinterpret_cast<Scene_Pos *>(object);
    (void) _this;
  }
  void Scene_Pos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Pos::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Pos &Scene_Pos::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Pos_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Pos::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Pos)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      ::memset(&x_, 0, static_cast<size_t>(reinterpret_cast<char *>(&z_) - reinterpret_cast<char *>(&x_)) + sizeof(z_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Pos::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required float x = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
            _Internal::set_has_x(&has_bits);
            x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        // required float y = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
            _Internal::set_has_y(&has_bits);
            y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        // required float z = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
            _Internal::set_has_z(&has_bits);
            z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Pos::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Pos)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required float x = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
    }

    // required float y = 2;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
    }

    // required float z = 3;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Pos)
    return target;
  }

  size_t Scene_Pos::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Pos)
    size_t total_size = 0;

    if (_internal_has_x()) {
      // required float x = 1;
      total_size += 1 + 4;
    }

    if (_internal_has_y()) {
      // required float y = 2;
      total_size += 1 + 4;
    }

    if (_internal_has_z()) {
      // required float z = 3;
      total_size += 1 + 4;
    }

    return total_size;
  }
  size_t Scene_Pos::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Pos)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {// All required fields are present.
      // required float x = 1;
      total_size += 1 + 4;

      // required float y = 2;
      total_size += 1 + 4;

      // required float z = 3;
      total_size += 1 + 4;

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Pos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Pos)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Pos *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Pos>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Pos)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Pos)
      MergeFrom(*source);
    }
  }

  void Scene_Pos::MergeFrom(const Scene_Pos &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Pos)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      if (cached_has_bits & 0x00000001u) {
        x_ = from.x_;
      }
      if (cached_has_bits & 0x00000002u) {
        y_ = from.y_;
      }
      if (cached_has_bits & 0x00000004u) {
        z_ = from.z_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Pos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Pos)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Pos::CopyFrom(const Scene_Pos &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Pos)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Pos::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    return true;
  }

  void Scene_Pos::InternalSwap(Scene_Pos *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Pos, z_) + sizeof(Scene_Pos::z_) - PROTOBUF_FIELD_OFFSET(Scene_Pos, x_)>(
            reinterpret_cast<char *>(&x_),
            reinterpret_cast<char *>(&other->x_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Pos::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Light::InitAsDefaultInstance() {
    ::tracerr::_Scene_Light_default_instance_._instance.get_mutable()->position_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
  }
  class Scene_Light::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Light>()._has_bits_);
    static const ::tracerr::Scene_Pos &position(const Scene_Light *msg);
    static void set_has_position(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_intensity(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
    }
  };

  const ::tracerr::Scene_Pos &
  Scene_Light::_Internal::position(const Scene_Light *msg) {
    return *msg->position_;
  }
  Scene_Light::Scene_Light(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Light)
  }
  Scene_Light::Scene_Light(const Scene_Light &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_position()) {
      position_ = new ::tracerr::Scene_Pos(*from.position_);
    } else {
      position_ = nullptr;
    }
    intensity_ = from.intensity_;
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Light)
  }

  void Scene_Light::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Light_scene_2eproto.base);
    ::memset(&position_, 0, static_cast<size_t>(reinterpret_cast<char *>(&intensity_) - reinterpret_cast<char *>(&position_)) + sizeof(intensity_));
  }

  Scene_Light::~Scene_Light() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Light)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Light::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    if (this != internal_default_instance()) delete position_;
  }

  void Scene_Light::ArenaDtor(void *object) {
    Scene_Light *_this = reinterpret_cast<Scene_Light *>(object);
    (void) _this;
  }
  void Scene_Light::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Light::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Light &Scene_Light::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Light_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Light::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Light)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    intensity_ = 0;
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Light::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required .tracerr.Scene.Pos position = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required float intensity = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
            _Internal::set_has_intensity(&has_bits);
            intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Light::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Light)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required .tracerr.Scene.Pos position = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      1, _Internal::position(this), target, stream);
    }

    // required float intensity = 2;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_intensity(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Light)
    return target;
  }

  size_t Scene_Light::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Light)
    size_t total_size = 0;

    if (_internal_has_position()) {
      // required .tracerr.Scene.Pos position = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *position_);
    }

    if (_internal_has_intensity()) {
      // required float intensity = 2;
      total_size += 1 + 4;
    }

    return total_size;
  }
  size_t Scene_Light::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Light)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {// All required fields are present.
      // required .tracerr.Scene.Pos position = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *position_);

      // required float intensity = 2;
      total_size += 1 + 4;

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Light::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Light)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Light *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Light>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Light)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Light)
      MergeFrom(*source);
    }
  }

  void Scene_Light::MergeFrom(const Scene_Light &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Light)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
      if (cached_has_bits & 0x00000001u) {
        _internal_mutable_position()->::tracerr::Scene_Pos::MergeFrom(from._internal_position());
      }
      if (cached_has_bits & 0x00000002u) {
        intensity_ = from.intensity_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Light::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Light)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Light::CopyFrom(const Scene_Light &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Light)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Light::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_position()) {
      if (!position_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Light::InternalSwap(Scene_Light *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Light, intensity_) + sizeof(Scene_Light::intensity_) - PROTOBUF_FIELD_OFFSET(Scene_Light, position_)>(
            reinterpret_cast<char *>(&position_),
            reinterpret_cast<char *>(&other->position_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Light::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Sphere::InitAsDefaultInstance() {
    ::tracerr::_Scene_Sphere_default_instance_._instance.get_mutable()->position_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Sphere_default_instance_._instance.get_mutable()->custom_material_ = const_cast<::tracerr::Scene_Material *>(
            ::tracerr::Scene_Material::internal_default_instance());
  }
  class Scene_Sphere::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Sphere>()._has_bits_);
    static const ::tracerr::Scene_Pos &position(const Scene_Sphere *msg);
    static void set_has_position(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_radius(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static void set_has_material(HasBits *has_bits) {
      (*has_bits)[0] |= 8u;
    }
    static void set_has_custom_material_enabled(HasBits *has_bits) {
      (*has_bits)[0] |= 16u;
    }
    static const ::tracerr::Scene_Material &custom_material(const Scene_Sphere *msg);
    static void set_has_custom_material(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
    }
  };

  const ::tracerr::Scene_Pos &
  Scene_Sphere::_Internal::position(const Scene_Sphere *msg) {
    return *msg->position_;
  }
  const ::tracerr::Scene_Material &
  Scene_Sphere::_Internal::custom_material(const Scene_Sphere *msg) {
    return *msg->custom_material_;
  }
  Scene_Sphere::Scene_Sphere(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Sphere)
  }
  Scene_Sphere::Scene_Sphere(const Scene_Sphere &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_position()) {
      position_ = new ::tracerr::Scene_Pos(*from.position_);
    } else {
      position_ = nullptr;
    }
    if (from._internal_has_custom_material()) {
      custom_material_ = new ::tracerr::Scene_Material(*from.custom_material_);
    } else {
      custom_material_ = nullptr;
    }
    ::memcpy(&radius_, &from.radius_,
             static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) -
                                 reinterpret_cast<char *>(&radius_)) +
                     sizeof(custom_material_enabled_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Sphere)
  }

  void Scene_Sphere::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Sphere_scene_2eproto.base);
    ::memset(&position_, 0, static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) - reinterpret_cast<char *>(&position_)) + sizeof(custom_material_enabled_));
  }

  Scene_Sphere::~Scene_Sphere() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Sphere)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Sphere::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    if (this != internal_default_instance()) delete position_;
    if (this != internal_default_instance()) delete custom_material_;
  }

  void Scene_Sphere::ArenaDtor(void *object) {
    Scene_Sphere *_this = reinterpret_cast<Scene_Sphere *>(object);
    (void) _this;
  }
  void Scene_Sphere::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Sphere::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Sphere &Scene_Sphere::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Sphere_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Sphere::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Sphere)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
      if (cached_has_bits & 0x00000001u) {
        GOOGLE_DCHECK(position_ != nullptr);
        position_->Clear();
      }
      if (cached_has_bits & 0x00000002u) {
        GOOGLE_DCHECK(custom_material_ != nullptr);
        custom_material_->Clear();
      }
    }
    if (cached_has_bits & 0x0000001cu) {
      ::memset(&radius_, 0, static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) - reinterpret_cast<char *>(&radius_)) + sizeof(custom_material_enabled_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Sphere::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required .tracerr.Scene.Pos position = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required float radius = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
            _Internal::set_has_radius(&has_bits);
            radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.MaterialType material = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::tracerr::Scene_MaterialType_IsValid(val))) {
              _internal_set_material(static_cast<::tracerr::Scene_MaterialType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
          } else
            goto handle_unusual;
          continue;
        // optional bool custom_material_enabled = 4 [default = false];
        case 4:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
            _Internal::set_has_custom_material_enabled(&has_bits);
            custom_material_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.Material custom_material = 5;
        case 5:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
            ptr = ctx->ParseMessage(_internal_mutable_custom_material(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Sphere::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Sphere)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required .tracerr.Scene.Pos position = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      1, _Internal::position(this), target, stream);
    }

    // required float radius = 2;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_radius(), target);
    }

    // optional .tracerr.Scene.MaterialType material = 3;
    if (cached_has_bits & 0x00000008u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
              3, this->_internal_material(), target);
    }

    // optional bool custom_material_enabled = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_custom_material_enabled(), target);
    }

    // optional .tracerr.Scene.Material custom_material = 5;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      5, _Internal::custom_material(this), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Sphere)
    return target;
  }

  size_t Scene_Sphere::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Sphere)
    size_t total_size = 0;

    if (_internal_has_position()) {
      // required .tracerr.Scene.Pos position = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *position_);
    }

    if (_internal_has_radius()) {
      // required float radius = 2;
      total_size += 1 + 4;
    }

    return total_size;
  }
  size_t Scene_Sphere::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Sphere)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {// All required fields are present.
      // required .tracerr.Scene.Pos position = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *position_);

      // required float radius = 2;
      total_size += 1 + 4;

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // optional .tracerr.Scene.Material custom_material = 5;
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *custom_material_);
    }

    if (cached_has_bits & 0x00000018u) {
      // optional .tracerr.Scene.MaterialType material = 3;
      if (cached_has_bits & 0x00000008u) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_material());
      }

      // optional bool custom_material_enabled = 4 [default = false];
      if (cached_has_bits & 0x00000010u) {
        total_size += 1 + 1;
      }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Sphere::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Sphere)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Sphere *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Sphere>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Sphere)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Sphere)
      MergeFrom(*source);
    }
  }

  void Scene_Sphere::MergeFrom(const Scene_Sphere &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Sphere)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x0000001fu) {
      if (cached_has_bits & 0x00000001u) {
        _internal_mutable_position()->::tracerr::Scene_Pos::MergeFrom(from._internal_position());
      }
      if (cached_has_bits & 0x00000002u) {
        _internal_mutable_custom_material()->::tracerr::Scene_Material::MergeFrom(from._internal_custom_material());
      }
      if (cached_has_bits & 0x00000004u) {
        radius_ = from.radius_;
      }
      if (cached_has_bits & 0x00000008u) {
        material_ = from.material_;
      }
      if (cached_has_bits & 0x00000010u) {
        custom_material_enabled_ = from.custom_material_enabled_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Sphere::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Sphere)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Sphere::CopyFrom(const Scene_Sphere &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Sphere)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Sphere::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_position()) {
      if (!position_->IsInitialized()) return false;
    }
    if (_internal_has_custom_material()) {
      if (!custom_material_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Sphere::InternalSwap(Scene_Sphere *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Sphere, custom_material_enabled_) + sizeof(Scene_Sphere::custom_material_enabled_) - PROTOBUF_FIELD_OFFSET(Scene_Sphere, position_)>(
            reinterpret_cast<char *>(&position_),
            reinterpret_cast<char *>(&other->position_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Sphere::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Triangle::InitAsDefaultInstance() {
    ::tracerr::_Scene_Triangle_default_instance_._instance.get_mutable()->p0_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Triangle_default_instance_._instance.get_mutable()->p1_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Triangle_default_instance_._instance.get_mutable()->p2_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Triangle_default_instance_._instance.get_mutable()->custom_material_ = const_cast<::tracerr::Scene_Material *>(
            ::tracerr::Scene_Material::internal_default_instance());
  }
  class Scene_Triangle::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Triangle>()._has_bits_);
    static const ::tracerr::Scene_Pos &p0(const Scene_Triangle *msg);
    static void set_has_p0(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static const ::tracerr::Scene_Pos &p1(const Scene_Triangle *msg);
    static void set_has_p1(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static const ::tracerr::Scene_Pos &p2(const Scene_Triangle *msg);
    static void set_has_p2(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static void set_has_material(HasBits *has_bits) {
      (*has_bits)[0] |= 16u;
    }
    static void set_has_custom_material_enabled(HasBits *has_bits) {
      (*has_bits)[0] |= 32u;
    }
    static const ::tracerr::Scene_Material &custom_material(const Scene_Triangle *msg);
    static void set_has_custom_material(HasBits *has_bits) {
      (*has_bits)[0] |= 8u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
    }
  };

  const ::tracerr::Scene_Pos &
  Scene_Triangle::_Internal::p0(const Scene_Triangle *msg) {
    return *msg->p0_;
  }
  const ::tracerr::Scene_Pos &
  Scene_Triangle::_Internal::p1(const Scene_Triangle *msg) {
    return *msg->p1_;
  }
  const ::tracerr::Scene_Pos &
  Scene_Triangle::_Internal::p2(const Scene_Triangle *msg) {
    return *msg->p2_;
  }
  const ::tracerr::Scene_Material &
  Scene_Triangle::_Internal::custom_material(const Scene_Triangle *msg) {
    return *msg->custom_material_;
  }
  Scene_Triangle::Scene_Triangle(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Triangle)
  }
  Scene_Triangle::Scene_Triangle(const Scene_Triangle &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_p0()) {
      p0_ = new ::tracerr::Scene_Pos(*from.p0_);
    } else {
      p0_ = nullptr;
    }
    if (from._internal_has_p1()) {
      p1_ = new ::tracerr::Scene_Pos(*from.p1_);
    } else {
      p1_ = nullptr;
    }
    if (from._internal_has_p2()) {
      p2_ = new ::tracerr::Scene_Pos(*from.p2_);
    } else {
      p2_ = nullptr;
    }
    if (from._internal_has_custom_material()) {
      custom_material_ = new ::tracerr::Scene_Material(*from.custom_material_);
    } else {
      custom_material_ = nullptr;
    }
    ::memcpy(&material_, &from.material_,
             static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) -
                                 reinterpret_cast<char *>(&material_)) +
                     sizeof(custom_material_enabled_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Triangle)
  }

  void Scene_Triangle::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Triangle_scene_2eproto.base);
    ::memset(&p0_, 0, static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) - reinterpret_cast<char *>(&p0_)) + sizeof(custom_material_enabled_));
  }

  Scene_Triangle::~Scene_Triangle() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Triangle)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Triangle::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    if (this != internal_default_instance()) delete p0_;
    if (this != internal_default_instance()) delete p1_;
    if (this != internal_default_instance()) delete p2_;
    if (this != internal_default_instance()) delete custom_material_;
  }

  void Scene_Triangle::ArenaDtor(void *object) {
    Scene_Triangle *_this = reinterpret_cast<Scene_Triangle *>(object);
    (void) _this;
  }
  void Scene_Triangle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Triangle::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Triangle &Scene_Triangle::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Triangle_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Triangle::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Triangle)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
      if (cached_has_bits & 0x00000001u) {
        GOOGLE_DCHECK(p0_ != nullptr);
        p0_->Clear();
      }
      if (cached_has_bits & 0x00000002u) {
        GOOGLE_DCHECK(p1_ != nullptr);
        p1_->Clear();
      }
      if (cached_has_bits & 0x00000004u) {
        GOOGLE_DCHECK(p2_ != nullptr);
        p2_->Clear();
      }
      if (cached_has_bits & 0x00000008u) {
        GOOGLE_DCHECK(custom_material_ != nullptr);
        custom_material_->Clear();
      }
    }
    if (cached_has_bits & 0x00000030u) {
      ::memset(&material_, 0, static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) - reinterpret_cast<char *>(&material_)) + sizeof(custom_material_enabled_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Triangle::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required .tracerr.Scene.Pos p0 = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            ptr = ctx->ParseMessage(_internal_mutable_p0(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Pos p1 = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
            ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Pos p2 = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
            ptr = ctx->ParseMessage(_internal_mutable_p2(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.MaterialType material = 4;
        case 4:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::tracerr::Scene_MaterialType_IsValid(val))) {
              _internal_set_material(static_cast<::tracerr::Scene_MaterialType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
          } else
            goto handle_unusual;
          continue;
        // optional bool custom_material_enabled = 5 [default = false];
        case 5:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
            _Internal::set_has_custom_material_enabled(&has_bits);
            custom_material_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.Material custom_material = 6;
        case 6:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
            ptr = ctx->ParseMessage(_internal_mutable_custom_material(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Triangle::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Triangle)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required .tracerr.Scene.Pos p0 = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      1, _Internal::p0(this), target, stream);
    }

    // required .tracerr.Scene.Pos p1 = 2;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      2, _Internal::p1(this), target, stream);
    }

    // required .tracerr.Scene.Pos p2 = 3;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      3, _Internal::p2(this), target, stream);
    }

    // optional .tracerr.Scene.MaterialType material = 4;
    if (cached_has_bits & 0x00000010u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
              4, this->_internal_material(), target);
    }

    // optional bool custom_material_enabled = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_custom_material_enabled(), target);
    }

    // optional .tracerr.Scene.Material custom_material = 6;
    if (cached_has_bits & 0x00000008u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      6, _Internal::custom_material(this), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Triangle)
    return target;
  }

  size_t Scene_Triangle::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Triangle)
    size_t total_size = 0;

    if (_internal_has_p0()) {
      // required .tracerr.Scene.Pos p0 = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p0_);
    }

    if (_internal_has_p1()) {
      // required .tracerr.Scene.Pos p1 = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p1_);
    }

    if (_internal_has_p2()) {
      // required .tracerr.Scene.Pos p2 = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p2_);
    }

    return total_size;
  }
  size_t Scene_Triangle::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Triangle)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {// All required fields are present.
      // required .tracerr.Scene.Pos p0 = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p0_);

      // required .tracerr.Scene.Pos p1 = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p1_);

      // required .tracerr.Scene.Pos p2 = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p2_);

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000038u) {
      // optional .tracerr.Scene.Material custom_material = 6;
      if (cached_has_bits & 0x00000008u) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                              *custom_material_);
      }

      // optional .tracerr.Scene.MaterialType material = 4;
      if (cached_has_bits & 0x00000010u) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_material());
      }

      // optional bool custom_material_enabled = 5 [default = false];
      if (cached_has_bits & 0x00000020u) {
        total_size += 1 + 1;
      }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Triangle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Triangle)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Triangle *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Triangle>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Triangle)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Triangle)
      MergeFrom(*source);
    }
  }

  void Scene_Triangle::MergeFrom(const Scene_Triangle &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Triangle)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x0000003fu) {
      if (cached_has_bits & 0x00000001u) {
        _internal_mutable_p0()->::tracerr::Scene_Pos::MergeFrom(from._internal_p0());
      }
      if (cached_has_bits & 0x00000002u) {
        _internal_mutable_p1()->::tracerr::Scene_Pos::MergeFrom(from._internal_p1());
      }
      if (cached_has_bits & 0x00000004u) {
        _internal_mutable_p2()->::tracerr::Scene_Pos::MergeFrom(from._internal_p2());
      }
      if (cached_has_bits & 0x00000008u) {
        _internal_mutable_custom_material()->::tracerr::Scene_Material::MergeFrom(from._internal_custom_material());
      }
      if (cached_has_bits & 0x00000010u) {
        material_ = from.material_;
      }
      if (cached_has_bits & 0x00000020u) {
        custom_material_enabled_ = from.custom_material_enabled_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Triangle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Triangle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Triangle::CopyFrom(const Scene_Triangle &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Triangle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Triangle::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_p0()) {
      if (!p0_->IsInitialized()) return false;
    }
    if (_internal_has_p1()) {
      if (!p1_->IsInitialized()) return false;
    }
    if (_internal_has_p2()) {
      if (!p2_->IsInitialized()) return false;
    }
    if (_internal_has_custom_material()) {
      if (!custom_material_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Triangle::InternalSwap(Scene_Triangle *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Triangle, custom_material_enabled_) + sizeof(Scene_Triangle::custom_material_enabled_) - PROTOBUF_FIELD_OFFSET(Scene_Triangle, p0_)>(
            reinterpret_cast<char *>(&p0_),
            reinterpret_cast<char *>(&other->p0_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Triangle::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Rectangle::InitAsDefaultInstance() {
    ::tracerr::_Scene_Rectangle_default_instance_._instance.get_mutable()->p0_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Rectangle_default_instance_._instance.get_mutable()->p1_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Rectangle_default_instance_._instance.get_mutable()->p2_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Rectangle_default_instance_._instance.get_mutable()->p3_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Rectangle_default_instance_._instance.get_mutable()->custom_material_ = const_cast<::tracerr::Scene_Material *>(
            ::tracerr::Scene_Material::internal_default_instance());
  }
  class Scene_Rectangle::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Rectangle>()._has_bits_);
    static const ::tracerr::Scene_Pos &p0(const Scene_Rectangle *msg);
    static void set_has_p0(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static const ::tracerr::Scene_Pos &p1(const Scene_Rectangle *msg);
    static void set_has_p1(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static const ::tracerr::Scene_Pos &p2(const Scene_Rectangle *msg);
    static void set_has_p2(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static const ::tracerr::Scene_Pos &p3(const Scene_Rectangle *msg);
    static void set_has_p3(HasBits *has_bits) {
      (*has_bits)[0] |= 8u;
    }
    static void set_has_material(HasBits *has_bits) {
      (*has_bits)[0] |= 32u;
    }
    static void set_has_custom_material_enabled(HasBits *has_bits) {
      (*has_bits)[0] |= 64u;
    }
    static const ::tracerr::Scene_Material &custom_material(const Scene_Rectangle *msg);
    static void set_has_custom_material(HasBits *has_bits) {
      (*has_bits)[0] |= 16u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
    }
  };

  const ::tracerr::Scene_Pos &
  Scene_Rectangle::_Internal::p0(const Scene_Rectangle *msg) {
    return *msg->p0_;
  }
  const ::tracerr::Scene_Pos &
  Scene_Rectangle::_Internal::p1(const Scene_Rectangle *msg) {
    return *msg->p1_;
  }
  const ::tracerr::Scene_Pos &
  Scene_Rectangle::_Internal::p2(const Scene_Rectangle *msg) {
    return *msg->p2_;
  }
  const ::tracerr::Scene_Pos &
  Scene_Rectangle::_Internal::p3(const Scene_Rectangle *msg) {
    return *msg->p3_;
  }
  const ::tracerr::Scene_Material &
  Scene_Rectangle::_Internal::custom_material(const Scene_Rectangle *msg) {
    return *msg->custom_material_;
  }
  Scene_Rectangle::Scene_Rectangle(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Rectangle)
  }
  Scene_Rectangle::Scene_Rectangle(const Scene_Rectangle &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_p0()) {
      p0_ = new ::tracerr::Scene_Pos(*from.p0_);
    } else {
      p0_ = nullptr;
    }
    if (from._internal_has_p1()) {
      p1_ = new ::tracerr::Scene_Pos(*from.p1_);
    } else {
      p1_ = nullptr;
    }
    if (from._internal_has_p2()) {
      p2_ = new ::tracerr::Scene_Pos(*from.p2_);
    } else {
      p2_ = nullptr;
    }
    if (from._internal_has_p3()) {
      p3_ = new ::tracerr::Scene_Pos(*from.p3_);
    } else {
      p3_ = nullptr;
    }
    if (from._internal_has_custom_material()) {
      custom_material_ = new ::tracerr::Scene_Material(*from.custom_material_);
    } else {
      custom_material_ = nullptr;
    }
    ::memcpy(&material_, &from.material_,
             static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) -
                                 reinterpret_cast<char *>(&material_)) +
                     sizeof(custom_material_enabled_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Rectangle)
  }

  void Scene_Rectangle::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Rectangle_scene_2eproto.base);
    ::memset(&p0_, 0, static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) - reinterpret_cast<char *>(&p0_)) + sizeof(custom_material_enabled_));
  }

  Scene_Rectangle::~Scene_Rectangle() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Rectangle)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Rectangle::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    if (this != internal_default_instance()) delete p0_;
    if (this != internal_default_instance()) delete p1_;
    if (this != internal_default_instance()) delete p2_;
    if (this != internal_default_instance()) delete p3_;
    if (this != internal_default_instance()) delete custom_material_;
  }

  void Scene_Rectangle::ArenaDtor(void *object) {
    Scene_Rectangle *_this = reinterpret_cast<Scene_Rectangle *>(object);
    (void) _this;
  }
  void Scene_Rectangle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Rectangle::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Rectangle &Scene_Rectangle::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Rectangle_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Rectangle::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Rectangle)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x0000001fu) {
      if (cached_has_bits & 0x00000001u) {
        GOOGLE_DCHECK(p0_ != nullptr);
        p0_->Clear();
      }
      if (cached_has_bits & 0x00000002u) {
        GOOGLE_DCHECK(p1_ != nullptr);
        p1_->Clear();
      }
      if (cached_has_bits & 0x00000004u) {
        GOOGLE_DCHECK(p2_ != nullptr);
        p2_->Clear();
      }
      if (cached_has_bits & 0x00000008u) {
        GOOGLE_DCHECK(p3_ != nullptr);
        p3_->Clear();
      }
      if (cached_has_bits & 0x00000010u) {
        GOOGLE_DCHECK(custom_material_ != nullptr);
        custom_material_->Clear();
      }
    }
    if (cached_has_bits & 0x00000060u) {
      ::memset(&material_, 0, static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) - reinterpret_cast<char *>(&material_)) + sizeof(custom_material_enabled_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Rectangle::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required .tracerr.Scene.Pos p0 = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            ptr = ctx->ParseMessage(_internal_mutable_p0(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Pos p1 = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
            ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Pos p2 = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
            ptr = ctx->ParseMessage(_internal_mutable_p2(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Pos p3 = 4;
        case 4:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
            ptr = ctx->ParseMessage(_internal_mutable_p3(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.MaterialType material = 5;
        case 5:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::tracerr::Scene_MaterialType_IsValid(val))) {
              _internal_set_material(static_cast<::tracerr::Scene_MaterialType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
          } else
            goto handle_unusual;
          continue;
        // optional bool custom_material_enabled = 6 [default = false];
        case 6:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
            _Internal::set_has_custom_material_enabled(&has_bits);
            custom_material_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.Material custom_material = 7;
        case 7:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
            ptr = ctx->ParseMessage(_internal_mutable_custom_material(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Rectangle::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Rectangle)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required .tracerr.Scene.Pos p0 = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      1, _Internal::p0(this), target, stream);
    }

    // required .tracerr.Scene.Pos p1 = 2;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      2, _Internal::p1(this), target, stream);
    }

    // required .tracerr.Scene.Pos p2 = 3;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      3, _Internal::p2(this), target, stream);
    }

    // required .tracerr.Scene.Pos p3 = 4;
    if (cached_has_bits & 0x00000008u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      4, _Internal::p3(this), target, stream);
    }

    // optional .tracerr.Scene.MaterialType material = 5;
    if (cached_has_bits & 0x00000020u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
              5, this->_internal_material(), target);
    }

    // optional bool custom_material_enabled = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_custom_material_enabled(), target);
    }

    // optional .tracerr.Scene.Material custom_material = 7;
    if (cached_has_bits & 0x00000010u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      7, _Internal::custom_material(this), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Rectangle)
    return target;
  }

  size_t Scene_Rectangle::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Rectangle)
    size_t total_size = 0;

    if (_internal_has_p0()) {
      // required .tracerr.Scene.Pos p0 = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p0_);
    }

    if (_internal_has_p1()) {
      // required .tracerr.Scene.Pos p1 = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p1_);
    }

    if (_internal_has_p2()) {
      // required .tracerr.Scene.Pos p2 = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p2_);
    }

    if (_internal_has_p3()) {
      // required .tracerr.Scene.Pos p3 = 4;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p3_);
    }

    return total_size;
  }
  size_t Scene_Rectangle::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Rectangle)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {// All required fields are present.
      // required .tracerr.Scene.Pos p0 = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p0_);

      // required .tracerr.Scene.Pos p1 = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p1_);

      // required .tracerr.Scene.Pos p2 = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p2_);

      // required .tracerr.Scene.Pos p3 = 4;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *p3_);

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000070u) {
      // optional .tracerr.Scene.Material custom_material = 7;
      if (cached_has_bits & 0x00000010u) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                              *custom_material_);
      }

      // optional .tracerr.Scene.MaterialType material = 5;
      if (cached_has_bits & 0x00000020u) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_material());
      }

      // optional bool custom_material_enabled = 6 [default = false];
      if (cached_has_bits & 0x00000040u) {
        total_size += 1 + 1;
      }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Rectangle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Rectangle)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Rectangle *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Rectangle>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Rectangle)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Rectangle)
      MergeFrom(*source);
    }
  }

  void Scene_Rectangle::MergeFrom(const Scene_Rectangle &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Rectangle)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x0000007fu) {
      if (cached_has_bits & 0x00000001u) {
        _internal_mutable_p0()->::tracerr::Scene_Pos::MergeFrom(from._internal_p0());
      }
      if (cached_has_bits & 0x00000002u) {
        _internal_mutable_p1()->::tracerr::Scene_Pos::MergeFrom(from._internal_p1());
      }
      if (cached_has_bits & 0x00000004u) {
        _internal_mutable_p2()->::tracerr::Scene_Pos::MergeFrom(from._internal_p2());
      }
      if (cached_has_bits & 0x00000008u) {
        _internal_mutable_p3()->::tracerr::Scene_Pos::MergeFrom(from._internal_p3());
      }
      if (cached_has_bits & 0x00000010u) {
        _internal_mutable_custom_material()->::tracerr::Scene_Material::MergeFrom(from._internal_custom_material());
      }
      if (cached_has_bits & 0x00000020u) {
        material_ = from.material_;
      }
      if (cached_has_bits & 0x00000040u) {
        custom_material_enabled_ = from.custom_material_enabled_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Rectangle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Rectangle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Rectangle::CopyFrom(const Scene_Rectangle &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Rectangle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Rectangle::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_p0()) {
      if (!p0_->IsInitialized()) return false;
    }
    if (_internal_has_p1()) {
      if (!p1_->IsInitialized()) return false;
    }
    if (_internal_has_p2()) {
      if (!p2_->IsInitialized()) return false;
    }
    if (_internal_has_p3()) {
      if (!p3_->IsInitialized()) return false;
    }
    if (_internal_has_custom_material()) {
      if (!custom_material_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Rectangle::InternalSwap(Scene_Rectangle *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Rectangle, custom_material_enabled_) + sizeof(Scene_Rectangle::custom_material_enabled_) - PROTOBUF_FIELD_OFFSET(Scene_Rectangle, p0_)>(
            reinterpret_cast<char *>(&p0_),
            reinterpret_cast<char *>(&other->p0_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Rectangle::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Obj::InitAsDefaultInstance() {
    ::tracerr::_Scene_Obj_default_instance_._instance.get_mutable()->translation_ = const_cast<::tracerr::Scene_Pos *>(
            ::tracerr::Scene_Pos::internal_default_instance());
    ::tracerr::_Scene_Obj_default_instance_._instance.get_mutable()->custom_material_ = const_cast<::tracerr::Scene_Material *>(
            ::tracerr::Scene_Material::internal_default_instance());
  }
  class Scene_Obj::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Obj>()._has_bits_);
    static void set_has_fname(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_material(HasBits *has_bits) {
      (*has_bits)[0] |= 8u;
    }
    static const ::tracerr::Scene_Pos &translation(const Scene_Obj *msg);
    static void set_has_translation(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static void set_has_custom_material_enabled(HasBits *has_bits) {
      (*has_bits)[0] |= 16u;
    }
    static const ::tracerr::Scene_Material &custom_material(const Scene_Obj *msg);
    static void set_has_custom_material(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
    }
  };

  const ::tracerr::Scene_Pos &
  Scene_Obj::_Internal::translation(const Scene_Obj *msg) {
    return *msg->translation_;
  }
  const ::tracerr::Scene_Material &
  Scene_Obj::_Internal::custom_material(const Scene_Obj *msg) {
    return *msg->custom_material_;
  }
  Scene_Obj::Scene_Obj(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Obj)
  }
  Scene_Obj::Scene_Obj(const Scene_Obj &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (from._internal_has_fname()) {
      fname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fname(),
                 GetArena());
    }
    if (from._internal_has_translation()) {
      translation_ = new ::tracerr::Scene_Pos(*from.translation_);
    } else {
      translation_ = nullptr;
    }
    if (from._internal_has_custom_material()) {
      custom_material_ = new ::tracerr::Scene_Material(*from.custom_material_);
    } else {
      custom_material_ = nullptr;
    }
    ::memcpy(&material_, &from.material_,
             static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) -
                                 reinterpret_cast<char *>(&material_)) +
                     sizeof(custom_material_enabled_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Obj)
  }

  void Scene_Obj::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Obj_scene_2eproto.base);
    fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&translation_, 0, static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) - reinterpret_cast<char *>(&translation_)) + sizeof(custom_material_enabled_));
  }

  Scene_Obj::~Scene_Obj() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Obj)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Obj::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (this != internal_default_instance()) delete translation_;
    if (this != internal_default_instance()) delete custom_material_;
  }

  void Scene_Obj::ArenaDtor(void *object) {
    Scene_Obj *_this = reinterpret_cast<Scene_Obj *>(object);
    (void) _this;
  }
  void Scene_Obj::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Obj::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Obj &Scene_Obj::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Obj_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Obj::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Obj)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      if (cached_has_bits & 0x00000001u) {
        fname_.ClearNonDefaultToEmpty();
      }
      if (cached_has_bits & 0x00000002u) {
        GOOGLE_DCHECK(translation_ != nullptr);
        translation_->Clear();
      }
      if (cached_has_bits & 0x00000004u) {
        GOOGLE_DCHECK(custom_material_ != nullptr);
        custom_material_->Clear();
      }
    }
    if (cached_has_bits & 0x00000018u) {
      ::memset(&material_, 0, static_cast<size_t>(reinterpret_cast<char *>(&custom_material_enabled_) - reinterpret_cast<char *>(&material_)) + sizeof(custom_material_enabled_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Obj::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required string fname = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            auto str = _internal_mutable_fname();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tracerr.Scene.Obj.fname");
#endif// !NDEBUG
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.MaterialType material = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::tracerr::Scene_MaterialType_IsValid(val))) {
              _internal_set_material(static_cast<::tracerr::Scene_MaterialType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.Pos translation = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
            ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional bool custom_material_enabled = 4 [default = false];
        case 4:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
            _Internal::set_has_custom_material_enabled(&has_bits);
            custom_material_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.Material custom_material = 5;
        case 5:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
            ptr = ctx->ParseMessage(_internal_mutable_custom_material(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Obj::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Obj)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required string fname = 1;
    if (cached_has_bits & 0x00000001u) {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
              this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
              "tracerr.Scene.Obj.fname");
      target = stream->WriteStringMaybeAliased(
              1, this->_internal_fname(), target);
    }

    // optional .tracerr.Scene.MaterialType material = 2;
    if (cached_has_bits & 0x00000008u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
              2, this->_internal_material(), target);
    }

    // optional .tracerr.Scene.Pos translation = 3;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      3, _Internal::translation(this), target, stream);
    }

    // optional bool custom_material_enabled = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_custom_material_enabled(), target);
    }

    // optional .tracerr.Scene.Material custom_material = 5;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      5, _Internal::custom_material(this), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Obj)
    return target;
  }

  size_t Scene_Obj::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Obj)
    size_t total_size = 0;

    // required string fname = 1;
    if (_internal_has_fname()) {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                            this->_internal_fname());
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x0000001eu) {
      // optional .tracerr.Scene.Pos translation = 3;
      if (cached_has_bits & 0x00000002u) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                              *translation_);
      }

      // optional .tracerr.Scene.Material custom_material = 5;
      if (cached_has_bits & 0x00000004u) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                              *custom_material_);
      }

      // optional .tracerr.Scene.MaterialType material = 2;
      if (cached_has_bits & 0x00000008u) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_material());
      }

      // optional bool custom_material_enabled = 4 [default = false];
      if (cached_has_bits & 0x00000010u) {
        total_size += 1 + 1;
      }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Obj::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Obj)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Obj *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Obj>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Obj)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Obj)
      MergeFrom(*source);
    }
  }

  void Scene_Obj::MergeFrom(const Scene_Obj &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Obj)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x0000001fu) {
      if (cached_has_bits & 0x00000001u) {
        _internal_set_fname(from._internal_fname());
      }
      if (cached_has_bits & 0x00000002u) {
        _internal_mutable_translation()->::tracerr::Scene_Pos::MergeFrom(from._internal_translation());
      }
      if (cached_has_bits & 0x00000004u) {
        _internal_mutable_custom_material()->::tracerr::Scene_Material::MergeFrom(from._internal_custom_material());
      }
      if (cached_has_bits & 0x00000008u) {
        material_ = from.material_;
      }
      if (cached_has_bits & 0x00000010u) {
        custom_material_enabled_ = from.custom_material_enabled_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Obj::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Obj)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Obj::CopyFrom(const Scene_Obj &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Obj)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Obj::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_translation()) {
      if (!translation_->IsInitialized()) return false;
    }
    if (_internal_has_custom_material()) {
      if (!custom_material_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Obj::InternalSwap(Scene_Obj *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Obj, custom_material_enabled_) + sizeof(Scene_Obj::custom_material_enabled_) - PROTOBUF_FIELD_OFFSET(Scene_Obj, translation_)>(
            reinterpret_cast<char *>(&translation_),
            reinterpret_cast<char *>(&other->translation_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Obj::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Color::InitAsDefaultInstance() {
  }
  class Scene_Color::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Color>()._has_bits_);
    static void set_has_r(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_g(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static void set_has_b(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
    }
  };

  Scene_Color::Scene_Color(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Color)
  }
  Scene_Color::Scene_Color(const Scene_Color &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&r_, &from.r_,
             static_cast<size_t>(reinterpret_cast<char *>(&b_) -
                                 reinterpret_cast<char *>(&r_)) +
                     sizeof(b_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Color)
  }

  void Scene_Color::SharedCtor() {
    ::memset(&r_, 0, static_cast<size_t>(reinterpret_cast<char *>(&b_) - reinterpret_cast<char *>(&r_)) + sizeof(b_));
  }

  Scene_Color::~Scene_Color() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Color)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Color::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void Scene_Color::ArenaDtor(void *object) {
    Scene_Color *_this = reinterpret_cast<Scene_Color *>(object);
    (void) _this;
  }
  void Scene_Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Color::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Color &Scene_Color::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Color_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Color::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Color)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      ::memset(&r_, 0, static_cast<size_t>(reinterpret_cast<char *>(&b_) - reinterpret_cast<char *>(&r_)) + sizeof(b_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Color::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required int32 r = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
            _Internal::set_has_r(&has_bits);
            r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required int32 g = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
            _Internal::set_has_g(&has_bits);
            g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required int32 b = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
            _Internal::set_has_b(&has_bits);
            b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Color::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Color)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required int32 r = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_r(), target);
    }

    // required int32 g = 2;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_g(), target);
    }

    // required int32 b = 3;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Color)
    return target;
  }

  size_t Scene_Color::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Color)
    size_t total_size = 0;

    if (_internal_has_r()) {
      // required int32 r = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_r());
    }

    if (_internal_has_g()) {
      // required int32 g = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_g());
    }

    if (_internal_has_b()) {
      // required int32 b = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_b());
    }

    return total_size;
  }
  size_t Scene_Color::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Color)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {// All required fields are present.
      // required int32 r = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_r());

      // required int32 g = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_g());

      // required int32 b = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_b());

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Color)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Color *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Color>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Color)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Color)
      MergeFrom(*source);
    }
  }

  void Scene_Color::MergeFrom(const Scene_Color &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Color)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      if (cached_has_bits & 0x00000001u) {
        r_ = from.r_;
      }
      if (cached_has_bits & 0x00000002u) {
        g_ = from.g_;
      }
      if (cached_has_bits & 0x00000004u) {
        b_ = from.b_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Color)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Color::CopyFrom(const Scene_Color &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Color)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Color::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    return true;
  }

  void Scene_Color::InternalSwap(Scene_Color *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Color, b_) + sizeof(Scene_Color::b_) - PROTOBUF_FIELD_OFFSET(Scene_Color, r_)>(
            reinterpret_cast<char *>(&r_),
            reinterpret_cast<char *>(&other->r_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Color::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Material_Color_diff::InitAsDefaultInstance() {
  }
  class Scene_Material_Color_diff::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Material_Color_diff>()._has_bits_);
    static void set_has_r(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_g(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static void set_has_b(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
    }
  };

  Scene_Material_Color_diff::Scene_Material_Color_diff(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Material.Color_diff)
  }
  Scene_Material_Color_diff::Scene_Material_Color_diff(const Scene_Material_Color_diff &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&r_, &from.r_,
             static_cast<size_t>(reinterpret_cast<char *>(&b_) -
                                 reinterpret_cast<char *>(&r_)) +
                     sizeof(b_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Material.Color_diff)
  }

  void Scene_Material_Color_diff::SharedCtor() {
    ::memset(&r_, 0, static_cast<size_t>(reinterpret_cast<char *>(&b_) - reinterpret_cast<char *>(&r_)) + sizeof(b_));
  }

  Scene_Material_Color_diff::~Scene_Material_Color_diff() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Material.Color_diff)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Material_Color_diff::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void Scene_Material_Color_diff::ArenaDtor(void *object) {
    Scene_Material_Color_diff *_this = reinterpret_cast<Scene_Material_Color_diff *>(object);
    (void) _this;
  }
  void Scene_Material_Color_diff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Material_Color_diff::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Material_Color_diff &Scene_Material_Color_diff::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Material_Color_diff_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Material_Color_diff::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Material.Color_diff)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      ::memset(&r_, 0, static_cast<size_t>(reinterpret_cast<char *>(&b_) - reinterpret_cast<char *>(&r_)) + sizeof(b_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Material_Color_diff::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required int32 r = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
            _Internal::set_has_r(&has_bits);
            r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required int32 g = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
            _Internal::set_has_g(&has_bits);
            g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required int32 b = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
            _Internal::set_has_b(&has_bits);
            b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Material_Color_diff::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Material.Color_diff)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required int32 r = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_r(), target);
    }

    // required int32 g = 2;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_g(), target);
    }

    // required int32 b = 3;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Material.Color_diff)
    return target;
  }

  size_t Scene_Material_Color_diff::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Material.Color_diff)
    size_t total_size = 0;

    if (_internal_has_r()) {
      // required int32 r = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_r());
    }

    if (_internal_has_g()) {
      // required int32 g = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_g());
    }

    if (_internal_has_b()) {
      // required int32 b = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_b());
    }

    return total_size;
  }
  size_t Scene_Material_Color_diff::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Material.Color_diff)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {// All required fields are present.
      // required int32 r = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_r());

      // required int32 g = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_g());

      // required int32 b = 3;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_b());

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Material_Color_diff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Material.Color_diff)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Material_Color_diff *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Material_Color_diff>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Material.Color_diff)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Material.Color_diff)
      MergeFrom(*source);
    }
  }

  void Scene_Material_Color_diff::MergeFrom(const Scene_Material_Color_diff &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Material.Color_diff)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
      if (cached_has_bits & 0x00000001u) {
        r_ = from.r_;
      }
      if (cached_has_bits & 0x00000002u) {
        g_ = from.g_;
      }
      if (cached_has_bits & 0x00000004u) {
        b_ = from.b_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Material_Color_diff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Material.Color_diff)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Material_Color_diff::CopyFrom(const Scene_Material_Color_diff &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Material.Color_diff)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Material_Color_diff::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    return true;
  }

  void Scene_Material_Color_diff::InternalSwap(Scene_Material_Color_diff *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Material_Color_diff, b_) + sizeof(Scene_Material_Color_diff::b_) - PROTOBUF_FIELD_OFFSET(Scene_Material_Color_diff, r_)>(
            reinterpret_cast<char *>(&r_),
            reinterpret_cast<char *>(&other->r_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Material_Color_diff::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Material_Albedo::InitAsDefaultInstance() {
  }
  class Scene_Material_Albedo::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Material_Albedo>()._has_bits_);
    static void set_has_a0(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_a1(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static void set_has_a2(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static void set_has_a3(HasBits *has_bits) {
      (*has_bits)[0] |= 8u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
    }
  };

  Scene_Material_Albedo::Scene_Material_Albedo(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Material.Albedo)
  }
  Scene_Material_Albedo::Scene_Material_Albedo(const Scene_Material_Albedo &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&a0_, &from.a0_,
             static_cast<size_t>(reinterpret_cast<char *>(&a3_) -
                                 reinterpret_cast<char *>(&a0_)) +
                     sizeof(a3_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Material.Albedo)
  }

  void Scene_Material_Albedo::SharedCtor() {
    ::memset(&a0_, 0, static_cast<size_t>(reinterpret_cast<char *>(&a3_) - reinterpret_cast<char *>(&a0_)) + sizeof(a3_));
  }

  Scene_Material_Albedo::~Scene_Material_Albedo() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Material.Albedo)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Material_Albedo::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void Scene_Material_Albedo::ArenaDtor(void *object) {
    Scene_Material_Albedo *_this = reinterpret_cast<Scene_Material_Albedo *>(object);
    (void) _this;
  }
  void Scene_Material_Albedo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Material_Albedo::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Material_Albedo &Scene_Material_Albedo::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Material_Albedo_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Material_Albedo::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Material.Albedo)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
      ::memset(&a0_, 0, static_cast<size_t>(reinterpret_cast<char *>(&a3_) - reinterpret_cast<char *>(&a0_)) + sizeof(a3_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Material_Albedo::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required float a0 = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
            _Internal::set_has_a0(&has_bits);
            a0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        // required float a1 = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
            _Internal::set_has_a1(&has_bits);
            a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        // required float a2 = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
            _Internal::set_has_a2(&has_bits);
            a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        // required float a3 = 4;
        case 4:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
            _Internal::set_has_a3(&has_bits);
            a3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Material_Albedo::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Material.Albedo)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required float a0 = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_a0(), target);
    }

    // required float a1 = 2;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_a1(), target);
    }

    // required float a2 = 3;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_a2(), target);
    }

    // required float a3 = 4;
    if (cached_has_bits & 0x00000008u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_a3(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Material.Albedo)
    return target;
  }

  size_t Scene_Material_Albedo::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Material.Albedo)
    size_t total_size = 0;

    if (_internal_has_a0()) {
      // required float a0 = 1;
      total_size += 1 + 4;
    }

    if (_internal_has_a1()) {
      // required float a1 = 2;
      total_size += 1 + 4;
    }

    if (_internal_has_a2()) {
      // required float a2 = 3;
      total_size += 1 + 4;
    }

    if (_internal_has_a3()) {
      // required float a3 = 4;
      total_size += 1 + 4;
    }

    return total_size;
  }
  size_t Scene_Material_Albedo::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Material.Albedo)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {// All required fields are present.
      // required float a0 = 1;
      total_size += 1 + 4;

      // required float a1 = 2;
      total_size += 1 + 4;

      // required float a2 = 3;
      total_size += 1 + 4;

      // required float a3 = 4;
      total_size += 1 + 4;

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Material_Albedo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Material.Albedo)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Material_Albedo *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Material_Albedo>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Material.Albedo)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Material.Albedo)
      MergeFrom(*source);
    }
  }

  void Scene_Material_Albedo::MergeFrom(const Scene_Material_Albedo &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Material.Albedo)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
      if (cached_has_bits & 0x00000001u) {
        a0_ = from.a0_;
      }
      if (cached_has_bits & 0x00000002u) {
        a1_ = from.a1_;
      }
      if (cached_has_bits & 0x00000004u) {
        a2_ = from.a2_;
      }
      if (cached_has_bits & 0x00000008u) {
        a3_ = from.a3_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Material_Albedo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Material.Albedo)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Material_Albedo::CopyFrom(const Scene_Material_Albedo &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Material.Albedo)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Material_Albedo::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    return true;
  }

  void Scene_Material_Albedo::InternalSwap(Scene_Material_Albedo *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Material_Albedo, a3_) + sizeof(Scene_Material_Albedo::a3_) - PROTOBUF_FIELD_OFFSET(Scene_Material_Albedo, a0_)>(
            reinterpret_cast<char *>(&a0_),
            reinterpret_cast<char *>(&other->a0_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Material_Albedo::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene_Material::InitAsDefaultInstance() {
    ::tracerr::_Scene_Material_default_instance_._instance.get_mutable()->color_ = const_cast<::tracerr::Scene_Material_Color_diff *>(
            ::tracerr::Scene_Material_Color_diff::internal_default_instance());
    ::tracerr::_Scene_Material_default_instance_._instance.get_mutable()->albedo_ = const_cast<::tracerr::Scene_Material_Albedo *>(
            ::tracerr::Scene_Material_Albedo::internal_default_instance());
  }
  class Scene_Material::_Internal {
public:
    using HasBits = decltype(std::declval<Scene_Material>()._has_bits_);
    static const ::tracerr::Scene_Material_Color_diff &color(const Scene_Material *msg);
    static void set_has_color(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static const ::tracerr::Scene_Material_Albedo &albedo(const Scene_Material *msg);
    static void set_has_albedo(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static void set_has_specular_comp(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static void set_has_refractive_index(HasBits *has_bits) {
      (*has_bits)[0] |= 8u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
    }
  };

  const ::tracerr::Scene_Material_Color_diff &
  Scene_Material::_Internal::color(const Scene_Material *msg) {
    return *msg->color_;
  }
  const ::tracerr::Scene_Material_Albedo &
  Scene_Material::_Internal::albedo(const Scene_Material *msg) {
    return *msg->albedo_;
  }
  Scene_Material::Scene_Material(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene.Material)
  }
  Scene_Material::Scene_Material(const Scene_Material &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_color()) {
      color_ = new ::tracerr::Scene_Material_Color_diff(*from.color_);
    } else {
      color_ = nullptr;
    }
    if (from._internal_has_albedo()) {
      albedo_ = new ::tracerr::Scene_Material_Albedo(*from.albedo_);
    } else {
      albedo_ = nullptr;
    }
    ::memcpy(&specular_comp_, &from.specular_comp_,
             static_cast<size_t>(reinterpret_cast<char *>(&refractive_index_) -
                                 reinterpret_cast<char *>(&specular_comp_)) +
                     sizeof(refractive_index_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene.Material)
  }

  void Scene_Material::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Material_scene_2eproto.base);
    ::memset(&color_, 0, static_cast<size_t>(reinterpret_cast<char *>(&refractive_index_) - reinterpret_cast<char *>(&color_)) + sizeof(refractive_index_));
  }

  Scene_Material::~Scene_Material() {
    // @@protoc_insertion_point(destructor:tracerr.Scene.Material)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene_Material::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    if (this != internal_default_instance()) delete color_;
    if (this != internal_default_instance()) delete albedo_;
  }

  void Scene_Material::ArenaDtor(void *object) {
    Scene_Material *_this = reinterpret_cast<Scene_Material *>(object);
    (void) _this;
  }
  void Scene_Material::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene_Material::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene_Material &Scene_Material::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Material_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene_Material::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene.Material)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
      if (cached_has_bits & 0x00000001u) {
        GOOGLE_DCHECK(color_ != nullptr);
        color_->Clear();
      }
      if (cached_has_bits & 0x00000002u) {
        GOOGLE_DCHECK(albedo_ != nullptr);
        albedo_->Clear();
      }
    }
    if (cached_has_bits & 0x0000000cu) {
      ::memset(&specular_comp_, 0, static_cast<size_t>(reinterpret_cast<char *>(&refractive_index_) - reinterpret_cast<char *>(&specular_comp_)) + sizeof(refractive_index_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene_Material::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required .tracerr.Scene.Material.Color_diff color = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
            ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required .tracerr.Scene.Material.Albedo albedo = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
            ptr = ctx->ParseMessage(_internal_mutable_albedo(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required float specular_comp = 3;
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
            _Internal::set_has_specular_comp(&has_bits);
            specular_comp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        // required float refractive_index = 4;
        case 4:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
            _Internal::set_has_refractive_index(&has_bits);
            refractive_index_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene_Material::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene.Material)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required .tracerr.Scene.Material.Color_diff color = 1;
    if (cached_has_bits & 0x00000001u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      1, _Internal::color(this), target, stream);
    }

    // required .tracerr.Scene.Material.Albedo albedo = 2;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      2, _Internal::albedo(this), target, stream);
    }

    // required float specular_comp = 3;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_specular_comp(), target);
    }

    // required float refractive_index = 4;
    if (cached_has_bits & 0x00000008u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_refractive_index(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene.Material)
    return target;
  }

  size_t Scene_Material::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene.Material)
    size_t total_size = 0;

    if (_internal_has_color()) {
      // required .tracerr.Scene.Material.Color_diff color = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *color_);
    }

    if (_internal_has_albedo()) {
      // required .tracerr.Scene.Material.Albedo albedo = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *albedo_);
    }

    if (_internal_has_specular_comp()) {
      // required float specular_comp = 3;
      total_size += 1 + 4;
    }

    if (_internal_has_refractive_index()) {
      // required float refractive_index = 4;
      total_size += 1 + 4;
    }

    return total_size;
  }
  size_t Scene_Material::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene.Material)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {// All required fields are present.
      // required .tracerr.Scene.Material.Color_diff color = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *color_);

      // required .tracerr.Scene.Material.Albedo albedo = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                            *albedo_);

      // required float specular_comp = 3;
      total_size += 1 + 4;

      // required float refractive_index = 4;
      total_size += 1 + 4;

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene_Material::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene.Material)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene_Material *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Material>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene.Material)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene.Material)
      MergeFrom(*source);
    }
  }

  void Scene_Material::MergeFrom(const Scene_Material &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene.Material)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
      if (cached_has_bits & 0x00000001u) {
        _internal_mutable_color()->::tracerr::Scene_Material_Color_diff::MergeFrom(from._internal_color());
      }
      if (cached_has_bits & 0x00000002u) {
        _internal_mutable_albedo()->::tracerr::Scene_Material_Albedo::MergeFrom(from._internal_albedo());
      }
      if (cached_has_bits & 0x00000004u) {
        specular_comp_ = from.specular_comp_;
      }
      if (cached_has_bits & 0x00000008u) {
        refractive_index_ = from.refractive_index_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
  }

  void Scene_Material::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene.Material)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene_Material::CopyFrom(const Scene_Material &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene.Material)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene_Material::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (_internal_has_color()) {
      if (!color_->IsInitialized()) return false;
    }
    if (_internal_has_albedo()) {
      if (!albedo_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene_Material::InternalSwap(Scene_Material *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene_Material, refractive_index_) + sizeof(Scene_Material::refractive_index_) - PROTOBUF_FIELD_OFFSET(Scene_Material, color_)>(
            reinterpret_cast<char *>(&color_),
            reinterpret_cast<char *>(&other->color_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene_Material::GetMetadata() const {
    return GetMetadataStatic();
  }


  // ===================================================================

  void Scene::InitAsDefaultInstance() {
    ::tracerr::_Scene_default_instance_._instance.get_mutable()->background_color_ = const_cast<::tracerr::Scene_Color *>(
            ::tracerr::Scene_Color::internal_default_instance());
  }
  class Scene::_Internal {
public:
    using HasBits = decltype(std::declval<Scene>()._has_bits_);
    static void set_has_width(HasBits *has_bits) {
      (*has_bits)[0] |= 4u;
    }
    static void set_has_height(HasBits *has_bits) {
      (*has_bits)[0] |= 8u;
    }
    static void set_has_savefile(HasBits *has_bits) {
      (*has_bits)[0] |= 64u;
    }
    static void set_has_fname(HasBits *has_bits) {
      (*has_bits)[0] |= 1u;
    }
    static void set_has_multithread(HasBits *has_bits) {
      (*has_bits)[0] |= 128u;
    }
    static void set_has_show_elapsed_time(HasBits *has_bits) {
      (*has_bits)[0] |= 256u;
    }
    static void set_has_show_checkerboard(HasBits *has_bits) {
      (*has_bits)[0] |= 16u;
    }
    static const ::tracerr::Scene_Color &background_color(const Scene *msg);
    static void set_has_background_color(HasBits *has_bits) {
      (*has_bits)[0] |= 2u;
    }
    static void set_has_ambient_light(HasBits *has_bits) {
      (*has_bits)[0] |= 32u;
    }
    static bool MissingRequiredFields(const HasBits &has_bits) {
      return ((has_bits[0] & 0x0000004c) ^ 0x0000004c) != 0;
    }
  };

  const ::tracerr::Scene_Color &
  Scene::_Internal::background_color(const Scene *msg) {
    return *msg->background_color_;
  }
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Scene::_i_give_permission_to_break_this_code_default_fname_;
  Scene::Scene(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena),
        light_(arena),
        sphere_(arena),
        triangle_(arena),
        rectangle_(arena),
        obj_(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:tracerr.Scene)
  }
  Scene::Scene(const Scene &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        _has_bits_(from._has_bits_),
        light_(from.light_),
        sphere_(from.sphere_),
        triangle_(from.triangle_),
        rectangle_(from.rectangle_),
        obj_(from.obj_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    fname_.UnsafeSetDefault(&::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get());
    if (from._internal_has_fname()) {
      fname_.Set(&::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get(), from._internal_fname(),
                 GetArena());
    }
    if (from._internal_has_background_color()) {
      background_color_ = new ::tracerr::Scene_Color(*from.background_color_);
    } else {
      background_color_ = nullptr;
    }
    ::memcpy(&width_, &from.width_,
             static_cast<size_t>(reinterpret_cast<char *>(&show_elapsed_time_) -
                                 reinterpret_cast<char *>(&width_)) +
                     sizeof(show_elapsed_time_));
    // @@protoc_insertion_point(copy_constructor:tracerr.Scene)
  }

  void Scene::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_scene_2eproto.base);
    fname_.UnsafeSetDefault(&::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get());
    ::memset(&background_color_, 0, static_cast<size_t>(reinterpret_cast<char *>(&ambient_light_) - reinterpret_cast<char *>(&background_color_)) + sizeof(ambient_light_));
    savefile_ = true;
    multithread_ = true;
    show_elapsed_time_ = true;
  }

  Scene::~Scene() {
    // @@protoc_insertion_point(destructor:tracerr.Scene)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Scene::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    fname_.DestroyNoArena(&::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get());
    if (this != internal_default_instance()) delete background_color_;
  }

  void Scene::ArenaDtor(void *object) {
    Scene *_this = reinterpret_cast<Scene *>(object);
    (void) _this;
  }
  void Scene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
  }
  void Scene::SetCachedSize(int size) const {
    _cached_size_.Set(size);
  }
  const Scene &Scene::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_scene_2eproto.base);
    return *internal_default_instance();
  }


  void Scene::Clear() {
    // @@protoc_insertion_point(message_clear_start:tracerr.Scene)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    light_.Clear();
    sphere_.Clear();
    triangle_.Clear();
    rectangle_.Clear();
    obj_.Clear();
    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
      if (cached_has_bits & 0x00000001u) {
        fname_.ClearToDefault(&::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get(), GetArena());
      }
      if (cached_has_bits & 0x00000002u) {
        GOOGLE_DCHECK(background_color_ != nullptr);
        background_color_->Clear();
      }
    }
    if (cached_has_bits & 0x000000fcu) {
      ::memset(&width_, 0, static_cast<size_t>(reinterpret_cast<char *>(&ambient_light_) - reinterpret_cast<char *>(&width_)) + sizeof(ambient_light_));
      savefile_ = true;
      multithread_ = true;
    }
    show_elapsed_time_ = true;
    _has_bits_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Scene::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    _Internal::HasBits has_bits{};
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3) {
        // required int32 width = 1;
        case 1:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
            _Internal::set_has_width(&has_bits);
            width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required int32 height = 2;
        case 2:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
            _Internal::set_has_height(&has_bits);
            height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // required bool saveFile = 3 [default = true];
        case 3:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
            _Internal::set_has_savefile(&has_bits);
            savefile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional string fname = 4 [default = "RenderTest.png"];
        case 4:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
            auto str = _internal_mutable_fname();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tracerr.Scene.fname");
#endif// !NDEBUG
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional bool multiThread = 5 [default = true];
        case 5:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
            _Internal::set_has_multithread(&has_bits);
            multithread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // repeated .tracerr.Scene.Light light = 6;
        case 6:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
            ptr -= 1;
            do {
              ptr += 1;
              ptr = ctx->ParseMessage(_internal_add_light(), ptr);
              CHK_(ptr);
              if (!ctx->DataAvailable(ptr)) break;
            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
          } else
            goto handle_unusual;
          continue;
        // repeated .tracerr.Scene.Sphere sphere = 7;
        case 7:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
            ptr -= 1;
            do {
              ptr += 1;
              ptr = ctx->ParseMessage(_internal_add_sphere(), ptr);
              CHK_(ptr);
              if (!ctx->DataAvailable(ptr)) break;
            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
          } else
            goto handle_unusual;
          continue;
        // repeated .tracerr.Scene.Triangle triangle = 8;
        case 8:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
            ptr -= 1;
            do {
              ptr += 1;
              ptr = ctx->ParseMessage(_internal_add_triangle(), ptr);
              CHK_(ptr);
              if (!ctx->DataAvailable(ptr)) break;
            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
          } else
            goto handle_unusual;
          continue;
        // repeated .tracerr.Scene.Rectangle rectangle = 9;
        case 9:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
            ptr -= 1;
            do {
              ptr += 1;
              ptr = ctx->ParseMessage(_internal_add_rectangle(), ptr);
              CHK_(ptr);
              if (!ctx->DataAvailable(ptr)) break;
            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
          } else
            goto handle_unusual;
          continue;
        // repeated .tracerr.Scene.Obj obj = 10;
        case 10:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
            ptr -= 1;
            do {
              ptr += 1;
              ptr = ctx->ParseMessage(_internal_add_obj(), ptr);
              CHK_(ptr);
              if (!ctx->DataAvailable(ptr)) break;
            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
          } else
            goto handle_unusual;
          continue;
        // optional bool show_elapsed_time = 11 [default = true];
        case 11:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
            _Internal::set_has_show_elapsed_time(&has_bits);
            show_elapsed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional bool show_checkerboard = 12 [default = false];
        case 12:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
            _Internal::set_has_show_checkerboard(&has_bits);
            show_checkerboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional .tracerr.Scene.Color background_color = 13;
        case 13:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
            ptr = ctx->ParseMessage(_internal_mutable_background_color(), ptr);
            CHK_(ptr);
          } else
            goto handle_unusual;
          continue;
        // optional float ambient_light = 14;
        case 14:
          if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
            _Internal::set_has_ambient_light(&has_bits);
            ambient_light_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
            ptr += sizeof(float);
          } else
            goto handle_unusual;
          continue;
        default: {
        handle_unusual:
          if ((tag & 7) == 4 || tag == 0) {
            ctx->SetLastTag(tag);
            goto success;
          }
          ptr = UnknownFieldParse(tag,
                                  _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                  ptr, ctx);
          CHK_(ptr != nullptr);
          continue;
        }
      }// switch
    }  // while
  success:
    _has_bits_.Or(has_bits);
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Scene::_InternalSerialize(
          ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:tracerr.Scene)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // required int32 width = 1;
    if (cached_has_bits & 0x00000004u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
    }

    // required int32 height = 2;
    if (cached_has_bits & 0x00000008u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
    }

    // required bool saveFile = 3 [default = true];
    if (cached_has_bits & 0x00000040u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_savefile(), target);
    }

    // optional string fname = 4 [default = "RenderTest.png"];
    if (cached_has_bits & 0x00000001u) {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
              this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
              "tracerr.Scene.fname");
      target = stream->WriteStringMaybeAliased(
              4, this->_internal_fname(), target);
    }

    // optional bool multiThread = 5 [default = true];
    if (cached_has_bits & 0x00000080u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_multithread(), target);
    }

    // repeated .tracerr.Scene.Light light = 6;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_light_size());
         i < n; i++) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(6, this->_internal_light(i), target, stream);
    }

    // repeated .tracerr.Scene.Sphere sphere = 7;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_sphere_size());
         i < n; i++) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(7, this->_internal_sphere(i), target, stream);
    }

    // repeated .tracerr.Scene.Triangle triangle = 8;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_triangle_size());
         i < n; i++) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(8, this->_internal_triangle(i), target, stream);
    }

    // repeated .tracerr.Scene.Rectangle rectangle = 9;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_rectangle_size());
         i < n; i++) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(9, this->_internal_rectangle(i), target, stream);
    }

    // repeated .tracerr.Scene.Obj obj = 10;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_obj_size());
         i < n; i++) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(10, this->_internal_obj(i), target, stream);
    }

    // optional bool show_elapsed_time = 11 [default = true];
    if (cached_has_bits & 0x00000100u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_show_elapsed_time(), target);
    }

    // optional bool show_checkerboard = 12 [default = false];
    if (cached_has_bits & 0x00000010u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_show_checkerboard(), target);
    }

    // optional .tracerr.Scene.Color background_color = 13;
    if (cached_has_bits & 0x00000002u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
              InternalWriteMessage(
                      13, _Internal::background_color(this), target, stream);
    }

    // optional float ambient_light = 14;
    if (cached_has_bits & 0x00000020u) {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_ambient_light(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
              _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:tracerr.Scene)
    return target;
  }

  size_t Scene::RequiredFieldsByteSizeFallback() const {
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:tracerr.Scene)
    size_t total_size = 0;

    if (_internal_has_width()) {
      // required int32 width = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_width());
    }

    if (_internal_has_height()) {
      // required int32 height = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_height());
    }

    if (_internal_has_savefile()) {
      // required bool saveFile = 3 [default = true];
      total_size += 1 + 1;
    }

    return total_size;
  }
  size_t Scene::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:tracerr.Scene)
    size_t total_size = 0;

    if (((_has_bits_[0] & 0x0000004c) ^ 0x0000004c) == 0) {// All required fields are present.
      // required int32 width = 1;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_width());

      // required int32 height = 2;
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                            this->_internal_height());

      // required bool saveFile = 3 [default = true];
      total_size += 1 + 1;

    } else {
      total_size += RequiredFieldsByteSizeFallback();
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // repeated .tracerr.Scene.Light light = 6;
    total_size += 1UL * this->_internal_light_size();
    for (const auto &msg : this->light_) {
      total_size +=
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .tracerr.Scene.Sphere sphere = 7;
    total_size += 1UL * this->_internal_sphere_size();
    for (const auto &msg : this->sphere_) {
      total_size +=
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .tracerr.Scene.Triangle triangle = 8;
    total_size += 1UL * this->_internal_triangle_size();
    for (const auto &msg : this->triangle_) {
      total_size +=
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .tracerr.Scene.Rectangle rectangle = 9;
    total_size += 1UL * this->_internal_rectangle_size();
    for (const auto &msg : this->rectangle_) {
      total_size +=
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .tracerr.Scene.Obj obj = 10;
    total_size += 1UL * this->_internal_obj_size();
    for (const auto &msg : this->obj_) {
      total_size +=
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
      // optional string fname = 4 [default = "RenderTest.png"];
      if (cached_has_bits & 0x00000001u) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_fname());
      }

      // optional .tracerr.Scene.Color background_color = 13;
      if (cached_has_bits & 0x00000002u) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                              *background_color_);
      }
    }
    if (cached_has_bits & 0x00000030u) {
      // optional bool show_checkerboard = 12 [default = false];
      if (cached_has_bits & 0x00000010u) {
        total_size += 1 + 1;
      }

      // optional float ambient_light = 14;
      if (cached_has_bits & 0x00000020u) {
        total_size += 1 + 4;
      }
    }
    // optional bool multiThread = 5 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

    // optional bool show_elapsed_time = 11 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
              _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Scene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:tracerr.Scene)
    GOOGLE_DCHECK_NE(&from, this);
    const Scene *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene>(
                    &from);
    if (source == nullptr) {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:tracerr.Scene)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:tracerr.Scene)
      MergeFrom(*source);
    }
  }

  void Scene::MergeFrom(const Scene &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:tracerr.Scene)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    light_.MergeFrom(from.light_);
    sphere_.MergeFrom(from.sphere_);
    triangle_.MergeFrom(from.triangle_);
    rectangle_.MergeFrom(from.rectangle_);
    obj_.MergeFrom(from.obj_);
    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 0x000000ffu) {
      if (cached_has_bits & 0x00000001u) {
        _internal_set_fname(from._internal_fname());
      }
      if (cached_has_bits & 0x00000002u) {
        _internal_mutable_background_color()->::tracerr::Scene_Color::MergeFrom(from._internal_background_color());
      }
      if (cached_has_bits & 0x00000004u) {
        width_ = from.width_;
      }
      if (cached_has_bits & 0x00000008u) {
        height_ = from.height_;
      }
      if (cached_has_bits & 0x00000010u) {
        show_checkerboard_ = from.show_checkerboard_;
      }
      if (cached_has_bits & 0x00000020u) {
        ambient_light_ = from.ambient_light_;
      }
      if (cached_has_bits & 0x00000040u) {
        savefile_ = from.savefile_;
      }
      if (cached_has_bits & 0x00000080u) {
        multithread_ = from.multithread_;
      }
      _has_bits_[0] |= cached_has_bits;
    }
    if (cached_has_bits & 0x00000100u) {
      _internal_set_show_elapsed_time(from._internal_show_elapsed_time());
    }
  }

  void Scene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:tracerr.Scene)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Scene::CopyFrom(const Scene &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:tracerr.Scene)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Scene::IsInitialized() const {
    if (_Internal::MissingRequiredFields(_has_bits_)) return false;
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(light_)) return false;
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sphere_)) return false;
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(triangle_)) return false;
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rectangle_)) return false;
    if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(obj_)) return false;
    if (_internal_has_background_color()) {
      if (!background_color_->IsInitialized()) return false;
    }
    return true;
  }

  void Scene::InternalSwap(Scene *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    light_.InternalSwap(&other->light_);
    sphere_.InternalSwap(&other->sphere_);
    triangle_.InternalSwap(&other->triangle_);
    rectangle_.InternalSwap(&other->rectangle_);
    obj_.InternalSwap(&other->obj_);
    fname_.Swap(&other->fname_, &::tracerr::Scene::_i_give_permission_to_break_this_code_default_fname_.get(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(Scene, ambient_light_) + sizeof(Scene::ambient_light_) - PROTOBUF_FIELD_OFFSET(Scene, background_color_)>(
            reinterpret_cast<char *>(&background_color_),
            reinterpret_cast<char *>(&other->background_color_));
    swap(savefile_, other->savefile_);
    swap(multithread_, other->multithread_);
    swap(show_elapsed_time_, other->show_elapsed_time_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Scene::GetMetadata() const {
    return GetMetadataStatic();
  }


  // @@protoc_insertion_point(namespace_scope)
}// namespace tracerr
PROTOBUF_NAMESPACE_OPEN
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Pos *Arena::CreateMaybeMessage<::tracerr::Scene_Pos>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Pos>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Light *Arena::CreateMaybeMessage<::tracerr::Scene_Light>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Light>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Sphere *Arena::CreateMaybeMessage<::tracerr::Scene_Sphere>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Sphere>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Triangle *Arena::CreateMaybeMessage<::tracerr::Scene_Triangle>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Triangle>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Rectangle *Arena::CreateMaybeMessage<::tracerr::Scene_Rectangle>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Rectangle>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Obj *Arena::CreateMaybeMessage<::tracerr::Scene_Obj>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Obj>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Color *Arena::CreateMaybeMessage<::tracerr::Scene_Color>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Color>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Material_Color_diff *Arena::CreateMaybeMessage<::tracerr::Scene_Material_Color_diff>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Material_Color_diff>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Material_Albedo *Arena::CreateMaybeMessage<::tracerr::Scene_Material_Albedo>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Material_Albedo>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene_Material *Arena::CreateMaybeMessage<::tracerr::Scene_Material>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene_Material>(arena);
}
template<>
PROTOBUF_NOINLINE ::tracerr::Scene *Arena::CreateMaybeMessage<::tracerr::Scene>(Arena *arena) {
  return Arena::CreateMessageInternal<::tracerr::Scene>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
